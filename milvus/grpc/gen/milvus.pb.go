// Code generated by protoc-gen-go. DO NOT EDIT.
// source: milvus.proto

package milvus_grpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type DataType int32

const (
	DataType_NULL    DataType = 0
	DataType_INT8    DataType = 1
	DataType_INT16   DataType = 2
	DataType_INT32   DataType = 3
	DataType_INT64   DataType = 4
	DataType_STRING  DataType = 20
	DataType_BOOL    DataType = 30
	DataType_FLOAT   DataType = 40
	DataType_DOUBLE  DataType = 41
	DataType_VECTOR  DataType = 100
	DataType_UNKNOWN DataType = 9999
)

var DataType_name = map[int32]string{
	0:    "NULL",
	1:    "INT8",
	2:    "INT16",
	3:    "INT32",
	4:    "INT64",
	20:   "STRING",
	30:   "BOOL",
	40:   "FLOAT",
	41:   "DOUBLE",
	100:  "VECTOR",
	9999: "UNKNOWN",
}

var DataType_value = map[string]int32{
	"NULL":    0,
	"INT8":    1,
	"INT16":   2,
	"INT32":   3,
	"INT64":   4,
	"STRING":  20,
	"BOOL":    30,
	"FLOAT":   40,
	"DOUBLE":  41,
	"VECTOR":  100,
	"UNKNOWN": 9999,
}

func (x DataType) String() string {
	return proto.EnumName(DataType_name, int32(x))
}

func (DataType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{0}
}

type CompareOperator int32

const (
	CompareOperator_LT  CompareOperator = 0
	CompareOperator_LTE CompareOperator = 1
	CompareOperator_EQ  CompareOperator = 2
	CompareOperator_GT  CompareOperator = 3
	CompareOperator_GTE CompareOperator = 4
	CompareOperator_NE  CompareOperator = 5
)

var CompareOperator_name = map[int32]string{
	0: "LT",
	1: "LTE",
	2: "EQ",
	3: "GT",
	4: "GTE",
	5: "NE",
}

var CompareOperator_value = map[string]int32{
	"LT":  0,
	"LTE": 1,
	"EQ":  2,
	"GT":  3,
	"GTE": 4,
	"NE":  5,
}

func (x CompareOperator) String() string {
	return proto.EnumName(CompareOperator_name, int32(x))
}

func (CompareOperator) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{1}
}

type Occur int32

const (
	Occur_INVALID  Occur = 0
	Occur_MUST     Occur = 1
	Occur_SHOULD   Occur = 2
	Occur_MUST_NOT Occur = 3
)

var Occur_name = map[int32]string{
	0: "INVALID",
	1: "MUST",
	2: "SHOULD",
	3: "MUST_NOT",
}

var Occur_value = map[string]int32{
	"INVALID":  0,
	"MUST":     1,
	"SHOULD":   2,
	"MUST_NOT": 3,
}

func (x Occur) String() string {
	return proto.EnumName(Occur_name, int32(x))
}

func (Occur) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{2}
}

//*
// @brief general usage
type KeyValuePair struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KeyValuePair) Reset()         { *m = KeyValuePair{} }
func (m *KeyValuePair) String() string { return proto.CompactTextString(m) }
func (*KeyValuePair) ProtoMessage()    {}
func (*KeyValuePair) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{0}
}

func (m *KeyValuePair) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KeyValuePair.Unmarshal(m, b)
}
func (m *KeyValuePair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KeyValuePair.Marshal(b, m, deterministic)
}
func (m *KeyValuePair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyValuePair.Merge(m, src)
}
func (m *KeyValuePair) XXX_Size() int {
	return xxx_messageInfo_KeyValuePair.Size(m)
}
func (m *KeyValuePair) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyValuePair.DiscardUnknown(m)
}

var xxx_messageInfo_KeyValuePair proto.InternalMessageInfo

func (m *KeyValuePair) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *KeyValuePair) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

//*
// @brief Collection name
type CollectionName struct {
	CollectionName       string   `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CollectionName) Reset()         { *m = CollectionName{} }
func (m *CollectionName) String() string { return proto.CompactTextString(m) }
func (*CollectionName) ProtoMessage()    {}
func (*CollectionName) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{1}
}

func (m *CollectionName) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CollectionName.Unmarshal(m, b)
}
func (m *CollectionName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CollectionName.Marshal(b, m, deterministic)
}
func (m *CollectionName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CollectionName.Merge(m, src)
}
func (m *CollectionName) XXX_Size() int {
	return xxx_messageInfo_CollectionName.Size(m)
}
func (m *CollectionName) XXX_DiscardUnknown() {
	xxx_messageInfo_CollectionName.DiscardUnknown(m)
}

var xxx_messageInfo_CollectionName proto.InternalMessageInfo

func (m *CollectionName) GetCollectionName() string {
	if m != nil {
		return m.CollectionName
	}
	return ""
}

//*
// @brief Collection name list
type CollectionNameList struct {
	Status               *Status  `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	CollectionNames      []string `protobuf:"bytes,2,rep,name=collection_names,json=collectionNames,proto3" json:"collection_names,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CollectionNameList) Reset()         { *m = CollectionNameList{} }
func (m *CollectionNameList) String() string { return proto.CompactTextString(m) }
func (*CollectionNameList) ProtoMessage()    {}
func (*CollectionNameList) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{2}
}

func (m *CollectionNameList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CollectionNameList.Unmarshal(m, b)
}
func (m *CollectionNameList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CollectionNameList.Marshal(b, m, deterministic)
}
func (m *CollectionNameList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CollectionNameList.Merge(m, src)
}
func (m *CollectionNameList) XXX_Size() int {
	return xxx_messageInfo_CollectionNameList.Size(m)
}
func (m *CollectionNameList) XXX_DiscardUnknown() {
	xxx_messageInfo_CollectionNameList.DiscardUnknown(m)
}

var xxx_messageInfo_CollectionNameList proto.InternalMessageInfo

func (m *CollectionNameList) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *CollectionNameList) GetCollectionNames() []string {
	if m != nil {
		return m.CollectionNames
	}
	return nil
}

//*
// @brief Collection schema
// metric_type: 1-L2, 2-IP
type CollectionSchema struct {
	Status               *Status         `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	CollectionName       string          `protobuf:"bytes,2,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	Dimension            int64           `protobuf:"varint,3,opt,name=dimension,proto3" json:"dimension,omitempty"`
	IndexFileSize        int64           `protobuf:"varint,4,opt,name=index_file_size,json=indexFileSize,proto3" json:"index_file_size,omitempty"`
	MetricType           int32           `protobuf:"varint,5,opt,name=metric_type,json=metricType,proto3" json:"metric_type,omitempty"`
	ExtraParams          []*KeyValuePair `protobuf:"bytes,6,rep,name=extra_params,json=extraParams,proto3" json:"extra_params,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *CollectionSchema) Reset()         { *m = CollectionSchema{} }
func (m *CollectionSchema) String() string { return proto.CompactTextString(m) }
func (*CollectionSchema) ProtoMessage()    {}
func (*CollectionSchema) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{3}
}

func (m *CollectionSchema) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CollectionSchema.Unmarshal(m, b)
}
func (m *CollectionSchema) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CollectionSchema.Marshal(b, m, deterministic)
}
func (m *CollectionSchema) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CollectionSchema.Merge(m, src)
}
func (m *CollectionSchema) XXX_Size() int {
	return xxx_messageInfo_CollectionSchema.Size(m)
}
func (m *CollectionSchema) XXX_DiscardUnknown() {
	xxx_messageInfo_CollectionSchema.DiscardUnknown(m)
}

var xxx_messageInfo_CollectionSchema proto.InternalMessageInfo

func (m *CollectionSchema) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *CollectionSchema) GetCollectionName() string {
	if m != nil {
		return m.CollectionName
	}
	return ""
}

func (m *CollectionSchema) GetDimension() int64 {
	if m != nil {
		return m.Dimension
	}
	return 0
}

func (m *CollectionSchema) GetIndexFileSize() int64 {
	if m != nil {
		return m.IndexFileSize
	}
	return 0
}

func (m *CollectionSchema) GetMetricType() int32 {
	if m != nil {
		return m.MetricType
	}
	return 0
}

func (m *CollectionSchema) GetExtraParams() []*KeyValuePair {
	if m != nil {
		return m.ExtraParams
	}
	return nil
}

//*
// @brief Params of partition
type PartitionParam struct {
	CollectionName       string   `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	Tag                  string   `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PartitionParam) Reset()         { *m = PartitionParam{} }
func (m *PartitionParam) String() string { return proto.CompactTextString(m) }
func (*PartitionParam) ProtoMessage()    {}
func (*PartitionParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{4}
}

func (m *PartitionParam) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PartitionParam.Unmarshal(m, b)
}
func (m *PartitionParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PartitionParam.Marshal(b, m, deterministic)
}
func (m *PartitionParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PartitionParam.Merge(m, src)
}
func (m *PartitionParam) XXX_Size() int {
	return xxx_messageInfo_PartitionParam.Size(m)
}
func (m *PartitionParam) XXX_DiscardUnknown() {
	xxx_messageInfo_PartitionParam.DiscardUnknown(m)
}

var xxx_messageInfo_PartitionParam proto.InternalMessageInfo

func (m *PartitionParam) GetCollectionName() string {
	if m != nil {
		return m.CollectionName
	}
	return ""
}

func (m *PartitionParam) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

//*
// @brief Partition list
type PartitionList struct {
	Status               *Status  `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	PartitionTagArray    []string `protobuf:"bytes,2,rep,name=partition_tag_array,json=partitionTagArray,proto3" json:"partition_tag_array,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PartitionList) Reset()         { *m = PartitionList{} }
func (m *PartitionList) String() string { return proto.CompactTextString(m) }
func (*PartitionList) ProtoMessage()    {}
func (*PartitionList) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{5}
}

func (m *PartitionList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PartitionList.Unmarshal(m, b)
}
func (m *PartitionList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PartitionList.Marshal(b, m, deterministic)
}
func (m *PartitionList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PartitionList.Merge(m, src)
}
func (m *PartitionList) XXX_Size() int {
	return xxx_messageInfo_PartitionList.Size(m)
}
func (m *PartitionList) XXX_DiscardUnknown() {
	xxx_messageInfo_PartitionList.DiscardUnknown(m)
}

var xxx_messageInfo_PartitionList proto.InternalMessageInfo

func (m *PartitionList) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *PartitionList) GetPartitionTagArray() []string {
	if m != nil {
		return m.PartitionTagArray
	}
	return nil
}

//*
// @brief Record inserted
type RowRecord struct {
	FloatData            []float32 `protobuf:"fixed32,1,rep,packed,name=float_data,json=floatData,proto3" json:"float_data,omitempty"`
	BinaryData           []byte    `protobuf:"bytes,2,opt,name=binary_data,json=binaryData,proto3" json:"binary_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *RowRecord) Reset()         { *m = RowRecord{} }
func (m *RowRecord) String() string { return proto.CompactTextString(m) }
func (*RowRecord) ProtoMessage()    {}
func (*RowRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{6}
}

func (m *RowRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RowRecord.Unmarshal(m, b)
}
func (m *RowRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RowRecord.Marshal(b, m, deterministic)
}
func (m *RowRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RowRecord.Merge(m, src)
}
func (m *RowRecord) XXX_Size() int {
	return xxx_messageInfo_RowRecord.Size(m)
}
func (m *RowRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_RowRecord.DiscardUnknown(m)
}

var xxx_messageInfo_RowRecord proto.InternalMessageInfo

func (m *RowRecord) GetFloatData() []float32 {
	if m != nil {
		return m.FloatData
	}
	return nil
}

func (m *RowRecord) GetBinaryData() []byte {
	if m != nil {
		return m.BinaryData
	}
	return nil
}

//*
// @brief Params to be inserted
type InsertParam struct {
	CollectionName       string          `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	RowRecordArray       []*RowRecord    `protobuf:"bytes,2,rep,name=row_record_array,json=rowRecordArray,proto3" json:"row_record_array,omitempty"`
	RowIdArray           []int64         `protobuf:"varint,3,rep,packed,name=row_id_array,json=rowIdArray,proto3" json:"row_id_array,omitempty"`
	PartitionTag         string          `protobuf:"bytes,4,opt,name=partition_tag,json=partitionTag,proto3" json:"partition_tag,omitempty"`
	ExtraParams          []*KeyValuePair `protobuf:"bytes,5,rep,name=extra_params,json=extraParams,proto3" json:"extra_params,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *InsertParam) Reset()         { *m = InsertParam{} }
func (m *InsertParam) String() string { return proto.CompactTextString(m) }
func (*InsertParam) ProtoMessage()    {}
func (*InsertParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{7}
}

func (m *InsertParam) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InsertParam.Unmarshal(m, b)
}
func (m *InsertParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InsertParam.Marshal(b, m, deterministic)
}
func (m *InsertParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InsertParam.Merge(m, src)
}
func (m *InsertParam) XXX_Size() int {
	return xxx_messageInfo_InsertParam.Size(m)
}
func (m *InsertParam) XXX_DiscardUnknown() {
	xxx_messageInfo_InsertParam.DiscardUnknown(m)
}

var xxx_messageInfo_InsertParam proto.InternalMessageInfo

func (m *InsertParam) GetCollectionName() string {
	if m != nil {
		return m.CollectionName
	}
	return ""
}

func (m *InsertParam) GetRowRecordArray() []*RowRecord {
	if m != nil {
		return m.RowRecordArray
	}
	return nil
}

func (m *InsertParam) GetRowIdArray() []int64 {
	if m != nil {
		return m.RowIdArray
	}
	return nil
}

func (m *InsertParam) GetPartitionTag() string {
	if m != nil {
		return m.PartitionTag
	}
	return ""
}

func (m *InsertParam) GetExtraParams() []*KeyValuePair {
	if m != nil {
		return m.ExtraParams
	}
	return nil
}

//*
// @brief Vector ids
type VectorIds struct {
	Status               *Status  `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	VectorIdArray        []int64  `protobuf:"varint,2,rep,packed,name=vector_id_array,json=vectorIdArray,proto3" json:"vector_id_array,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VectorIds) Reset()         { *m = VectorIds{} }
func (m *VectorIds) String() string { return proto.CompactTextString(m) }
func (*VectorIds) ProtoMessage()    {}
func (*VectorIds) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{8}
}

func (m *VectorIds) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VectorIds.Unmarshal(m, b)
}
func (m *VectorIds) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VectorIds.Marshal(b, m, deterministic)
}
func (m *VectorIds) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VectorIds.Merge(m, src)
}
func (m *VectorIds) XXX_Size() int {
	return xxx_messageInfo_VectorIds.Size(m)
}
func (m *VectorIds) XXX_DiscardUnknown() {
	xxx_messageInfo_VectorIds.DiscardUnknown(m)
}

var xxx_messageInfo_VectorIds proto.InternalMessageInfo

func (m *VectorIds) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *VectorIds) GetVectorIdArray() []int64 {
	if m != nil {
		return m.VectorIdArray
	}
	return nil
}

//*
// @brief Params for searching vector
type SearchParam struct {
	CollectionName       string          `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	PartitionTagArray    []string        `protobuf:"bytes,2,rep,name=partition_tag_array,json=partitionTagArray,proto3" json:"partition_tag_array,omitempty"`
	QueryRecordArray     []*RowRecord    `protobuf:"bytes,3,rep,name=query_record_array,json=queryRecordArray,proto3" json:"query_record_array,omitempty"`
	Topk                 int64           `protobuf:"varint,4,opt,name=topk,proto3" json:"topk,omitempty"`
	ExtraParams          []*KeyValuePair `protobuf:"bytes,5,rep,name=extra_params,json=extraParams,proto3" json:"extra_params,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *SearchParam) Reset()         { *m = SearchParam{} }
func (m *SearchParam) String() string { return proto.CompactTextString(m) }
func (*SearchParam) ProtoMessage()    {}
func (*SearchParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{9}
}

func (m *SearchParam) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SearchParam.Unmarshal(m, b)
}
func (m *SearchParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SearchParam.Marshal(b, m, deterministic)
}
func (m *SearchParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchParam.Merge(m, src)
}
func (m *SearchParam) XXX_Size() int {
	return xxx_messageInfo_SearchParam.Size(m)
}
func (m *SearchParam) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchParam.DiscardUnknown(m)
}

var xxx_messageInfo_SearchParam proto.InternalMessageInfo

func (m *SearchParam) GetCollectionName() string {
	if m != nil {
		return m.CollectionName
	}
	return ""
}

func (m *SearchParam) GetPartitionTagArray() []string {
	if m != nil {
		return m.PartitionTagArray
	}
	return nil
}

func (m *SearchParam) GetQueryRecordArray() []*RowRecord {
	if m != nil {
		return m.QueryRecordArray
	}
	return nil
}

func (m *SearchParam) GetTopk() int64 {
	if m != nil {
		return m.Topk
	}
	return 0
}

func (m *SearchParam) GetExtraParams() []*KeyValuePair {
	if m != nil {
		return m.ExtraParams
	}
	return nil
}

//*
// @brief Params for searching vector in files
type SearchInFilesParam struct {
	FileIdArray          []string     `protobuf:"bytes,1,rep,name=file_id_array,json=fileIdArray,proto3" json:"file_id_array,omitempty"`
	SearchParam          *SearchParam `protobuf:"bytes,2,opt,name=search_param,json=searchParam,proto3" json:"search_param,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *SearchInFilesParam) Reset()         { *m = SearchInFilesParam{} }
func (m *SearchInFilesParam) String() string { return proto.CompactTextString(m) }
func (*SearchInFilesParam) ProtoMessage()    {}
func (*SearchInFilesParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{10}
}

func (m *SearchInFilesParam) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SearchInFilesParam.Unmarshal(m, b)
}
func (m *SearchInFilesParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SearchInFilesParam.Marshal(b, m, deterministic)
}
func (m *SearchInFilesParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchInFilesParam.Merge(m, src)
}
func (m *SearchInFilesParam) XXX_Size() int {
	return xxx_messageInfo_SearchInFilesParam.Size(m)
}
func (m *SearchInFilesParam) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchInFilesParam.DiscardUnknown(m)
}

var xxx_messageInfo_SearchInFilesParam proto.InternalMessageInfo

func (m *SearchInFilesParam) GetFileIdArray() []string {
	if m != nil {
		return m.FileIdArray
	}
	return nil
}

func (m *SearchInFilesParam) GetSearchParam() *SearchParam {
	if m != nil {
		return m.SearchParam
	}
	return nil
}

//*
// @brief Params for searching vector by ID
type SearchByIDParam struct {
	CollectionName       string          `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	PartitionTagArray    []string        `protobuf:"bytes,2,rep,name=partition_tag_array,json=partitionTagArray,proto3" json:"partition_tag_array,omitempty"`
	IdArray              []int64         `protobuf:"varint,3,rep,packed,name=id_array,json=idArray,proto3" json:"id_array,omitempty"`
	Topk                 int64           `protobuf:"varint,4,opt,name=topk,proto3" json:"topk,omitempty"`
	ExtraParams          []*KeyValuePair `protobuf:"bytes,5,rep,name=extra_params,json=extraParams,proto3" json:"extra_params,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *SearchByIDParam) Reset()         { *m = SearchByIDParam{} }
func (m *SearchByIDParam) String() string { return proto.CompactTextString(m) }
func (*SearchByIDParam) ProtoMessage()    {}
func (*SearchByIDParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{11}
}

func (m *SearchByIDParam) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SearchByIDParam.Unmarshal(m, b)
}
func (m *SearchByIDParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SearchByIDParam.Marshal(b, m, deterministic)
}
func (m *SearchByIDParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchByIDParam.Merge(m, src)
}
func (m *SearchByIDParam) XXX_Size() int {
	return xxx_messageInfo_SearchByIDParam.Size(m)
}
func (m *SearchByIDParam) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchByIDParam.DiscardUnknown(m)
}

var xxx_messageInfo_SearchByIDParam proto.InternalMessageInfo

func (m *SearchByIDParam) GetCollectionName() string {
	if m != nil {
		return m.CollectionName
	}
	return ""
}

func (m *SearchByIDParam) GetPartitionTagArray() []string {
	if m != nil {
		return m.PartitionTagArray
	}
	return nil
}

func (m *SearchByIDParam) GetIdArray() []int64 {
	if m != nil {
		return m.IdArray
	}
	return nil
}

func (m *SearchByIDParam) GetTopk() int64 {
	if m != nil {
		return m.Topk
	}
	return 0
}

func (m *SearchByIDParam) GetExtraParams() []*KeyValuePair {
	if m != nil {
		return m.ExtraParams
	}
	return nil
}

//*
// @brief Params for preload collection/partitions
type PreloadCollectionParam struct {
	CollectionName       string   `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	PartitionTagArray    []string `protobuf:"bytes,2,rep,name=partition_tag_array,json=partitionTagArray,proto3" json:"partition_tag_array,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PreloadCollectionParam) Reset()         { *m = PreloadCollectionParam{} }
func (m *PreloadCollectionParam) String() string { return proto.CompactTextString(m) }
func (*PreloadCollectionParam) ProtoMessage()    {}
func (*PreloadCollectionParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{12}
}

func (m *PreloadCollectionParam) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PreloadCollectionParam.Unmarshal(m, b)
}
func (m *PreloadCollectionParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PreloadCollectionParam.Marshal(b, m, deterministic)
}
func (m *PreloadCollectionParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PreloadCollectionParam.Merge(m, src)
}
func (m *PreloadCollectionParam) XXX_Size() int {
	return xxx_messageInfo_PreloadCollectionParam.Size(m)
}
func (m *PreloadCollectionParam) XXX_DiscardUnknown() {
	xxx_messageInfo_PreloadCollectionParam.DiscardUnknown(m)
}

var xxx_messageInfo_PreloadCollectionParam proto.InternalMessageInfo

func (m *PreloadCollectionParam) GetCollectionName() string {
	if m != nil {
		return m.CollectionName
	}
	return ""
}

func (m *PreloadCollectionParam) GetPartitionTagArray() []string {
	if m != nil {
		return m.PartitionTagArray
	}
	return nil
}

//*
// @brief Params for reloading segments
type ReLoadSegmentsParam struct {
	CollectionName       string   `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	SegmentIdArray       []string `protobuf:"bytes,2,rep,name=segment_id_array,json=segmentIdArray,proto3" json:"segment_id_array,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReLoadSegmentsParam) Reset()         { *m = ReLoadSegmentsParam{} }
func (m *ReLoadSegmentsParam) String() string { return proto.CompactTextString(m) }
func (*ReLoadSegmentsParam) ProtoMessage()    {}
func (*ReLoadSegmentsParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{13}
}

func (m *ReLoadSegmentsParam) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReLoadSegmentsParam.Unmarshal(m, b)
}
func (m *ReLoadSegmentsParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReLoadSegmentsParam.Marshal(b, m, deterministic)
}
func (m *ReLoadSegmentsParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReLoadSegmentsParam.Merge(m, src)
}
func (m *ReLoadSegmentsParam) XXX_Size() int {
	return xxx_messageInfo_ReLoadSegmentsParam.Size(m)
}
func (m *ReLoadSegmentsParam) XXX_DiscardUnknown() {
	xxx_messageInfo_ReLoadSegmentsParam.DiscardUnknown(m)
}

var xxx_messageInfo_ReLoadSegmentsParam proto.InternalMessageInfo

func (m *ReLoadSegmentsParam) GetCollectionName() string {
	if m != nil {
		return m.CollectionName
	}
	return ""
}

func (m *ReLoadSegmentsParam) GetSegmentIdArray() []string {
	if m != nil {
		return m.SegmentIdArray
	}
	return nil
}

//*
// @brief Query result params
type TopKQueryResult struct {
	Status               *Status   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	RowNum               int64     `protobuf:"varint,2,opt,name=row_num,json=rowNum,proto3" json:"row_num,omitempty"`
	Ids                  []int64   `protobuf:"varint,3,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	Distances            []float32 `protobuf:"fixed32,4,rep,packed,name=distances,proto3" json:"distances,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *TopKQueryResult) Reset()         { *m = TopKQueryResult{} }
func (m *TopKQueryResult) String() string { return proto.CompactTextString(m) }
func (*TopKQueryResult) ProtoMessage()    {}
func (*TopKQueryResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{14}
}

func (m *TopKQueryResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TopKQueryResult.Unmarshal(m, b)
}
func (m *TopKQueryResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TopKQueryResult.Marshal(b, m, deterministic)
}
func (m *TopKQueryResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopKQueryResult.Merge(m, src)
}
func (m *TopKQueryResult) XXX_Size() int {
	return xxx_messageInfo_TopKQueryResult.Size(m)
}
func (m *TopKQueryResult) XXX_DiscardUnknown() {
	xxx_messageInfo_TopKQueryResult.DiscardUnknown(m)
}

var xxx_messageInfo_TopKQueryResult proto.InternalMessageInfo

func (m *TopKQueryResult) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *TopKQueryResult) GetRowNum() int64 {
	if m != nil {
		return m.RowNum
	}
	return 0
}

func (m *TopKQueryResult) GetIds() []int64 {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *TopKQueryResult) GetDistances() []float32 {
	if m != nil {
		return m.Distances
	}
	return nil
}

//*
// @brief Server string Reply
type StringReply struct {
	Status               *Status  `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	StringReply          string   `protobuf:"bytes,2,opt,name=string_reply,json=stringReply,proto3" json:"string_reply,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StringReply) Reset()         { *m = StringReply{} }
func (m *StringReply) String() string { return proto.CompactTextString(m) }
func (*StringReply) ProtoMessage()    {}
func (*StringReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{15}
}

func (m *StringReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StringReply.Unmarshal(m, b)
}
func (m *StringReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StringReply.Marshal(b, m, deterministic)
}
func (m *StringReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StringReply.Merge(m, src)
}
func (m *StringReply) XXX_Size() int {
	return xxx_messageInfo_StringReply.Size(m)
}
func (m *StringReply) XXX_DiscardUnknown() {
	xxx_messageInfo_StringReply.DiscardUnknown(m)
}

var xxx_messageInfo_StringReply proto.InternalMessageInfo

func (m *StringReply) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *StringReply) GetStringReply() string {
	if m != nil {
		return m.StringReply
	}
	return ""
}

//*
// @brief Server bool Reply
type BoolReply struct {
	Status               *Status  `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	BoolReply            bool     `protobuf:"varint,2,opt,name=bool_reply,json=boolReply,proto3" json:"bool_reply,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BoolReply) Reset()         { *m = BoolReply{} }
func (m *BoolReply) String() string { return proto.CompactTextString(m) }
func (*BoolReply) ProtoMessage()    {}
func (*BoolReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{16}
}

func (m *BoolReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BoolReply.Unmarshal(m, b)
}
func (m *BoolReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BoolReply.Marshal(b, m, deterministic)
}
func (m *BoolReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BoolReply.Merge(m, src)
}
func (m *BoolReply) XXX_Size() int {
	return xxx_messageInfo_BoolReply.Size(m)
}
func (m *BoolReply) XXX_DiscardUnknown() {
	xxx_messageInfo_BoolReply.DiscardUnknown(m)
}

var xxx_messageInfo_BoolReply proto.InternalMessageInfo

func (m *BoolReply) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *BoolReply) GetBoolReply() bool {
	if m != nil {
		return m.BoolReply
	}
	return false
}

//*
// @brief Return collection row count
type CollectionRowCount struct {
	Status               *Status  `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	CollectionRowCount   int64    `protobuf:"varint,2,opt,name=collection_row_count,json=collectionRowCount,proto3" json:"collection_row_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CollectionRowCount) Reset()         { *m = CollectionRowCount{} }
func (m *CollectionRowCount) String() string { return proto.CompactTextString(m) }
func (*CollectionRowCount) ProtoMessage()    {}
func (*CollectionRowCount) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{17}
}

func (m *CollectionRowCount) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CollectionRowCount.Unmarshal(m, b)
}
func (m *CollectionRowCount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CollectionRowCount.Marshal(b, m, deterministic)
}
func (m *CollectionRowCount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CollectionRowCount.Merge(m, src)
}
func (m *CollectionRowCount) XXX_Size() int {
	return xxx_messageInfo_CollectionRowCount.Size(m)
}
func (m *CollectionRowCount) XXX_DiscardUnknown() {
	xxx_messageInfo_CollectionRowCount.DiscardUnknown(m)
}

var xxx_messageInfo_CollectionRowCount proto.InternalMessageInfo

func (m *CollectionRowCount) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *CollectionRowCount) GetCollectionRowCount() int64 {
	if m != nil {
		return m.CollectionRowCount
	}
	return 0
}

//*
// @brief Give server Command
type Command struct {
	Cmd                  string   `protobuf:"bytes,1,opt,name=cmd,proto3" json:"cmd,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Command) Reset()         { *m = Command{} }
func (m *Command) String() string { return proto.CompactTextString(m) }
func (*Command) ProtoMessage()    {}
func (*Command) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{18}
}

func (m *Command) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Command.Unmarshal(m, b)
}
func (m *Command) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Command.Marshal(b, m, deterministic)
}
func (m *Command) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Command.Merge(m, src)
}
func (m *Command) XXX_Size() int {
	return xxx_messageInfo_Command.Size(m)
}
func (m *Command) XXX_DiscardUnknown() {
	xxx_messageInfo_Command.DiscardUnknown(m)
}

var xxx_messageInfo_Command proto.InternalMessageInfo

func (m *Command) GetCmd() string {
	if m != nil {
		return m.Cmd
	}
	return ""
}

//*
// @brief Index params
// @index_type: 0-invalid, 1-idmap, 2-ivflat, 3-ivfsq8, 4-nsgmix
type IndexParam struct {
	Status               *Status         `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	CollectionName       string          `protobuf:"bytes,2,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	IndexType            int32           `protobuf:"varint,3,opt,name=index_type,json=indexType,proto3" json:"index_type,omitempty"`
	ExtraParams          []*KeyValuePair `protobuf:"bytes,4,rep,name=extra_params,json=extraParams,proto3" json:"extra_params,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *IndexParam) Reset()         { *m = IndexParam{} }
func (m *IndexParam) String() string { return proto.CompactTextString(m) }
func (*IndexParam) ProtoMessage()    {}
func (*IndexParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{19}
}

func (m *IndexParam) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IndexParam.Unmarshal(m, b)
}
func (m *IndexParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IndexParam.Marshal(b, m, deterministic)
}
func (m *IndexParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IndexParam.Merge(m, src)
}
func (m *IndexParam) XXX_Size() int {
	return xxx_messageInfo_IndexParam.Size(m)
}
func (m *IndexParam) XXX_DiscardUnknown() {
	xxx_messageInfo_IndexParam.DiscardUnknown(m)
}

var xxx_messageInfo_IndexParam proto.InternalMessageInfo

func (m *IndexParam) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *IndexParam) GetCollectionName() string {
	if m != nil {
		return m.CollectionName
	}
	return ""
}

func (m *IndexParam) GetIndexType() int32 {
	if m != nil {
		return m.IndexType
	}
	return 0
}

func (m *IndexParam) GetExtraParams() []*KeyValuePair {
	if m != nil {
		return m.ExtraParams
	}
	return nil
}

//*
// @brief Flush params
type FlushParam struct {
	CollectionNameArray  []string `protobuf:"bytes,1,rep,name=collection_name_array,json=collectionNameArray,proto3" json:"collection_name_array,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FlushParam) Reset()         { *m = FlushParam{} }
func (m *FlushParam) String() string { return proto.CompactTextString(m) }
func (*FlushParam) ProtoMessage()    {}
func (*FlushParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{20}
}

func (m *FlushParam) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FlushParam.Unmarshal(m, b)
}
func (m *FlushParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FlushParam.Marshal(b, m, deterministic)
}
func (m *FlushParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlushParam.Merge(m, src)
}
func (m *FlushParam) XXX_Size() int {
	return xxx_messageInfo_FlushParam.Size(m)
}
func (m *FlushParam) XXX_DiscardUnknown() {
	xxx_messageInfo_FlushParam.DiscardUnknown(m)
}

var xxx_messageInfo_FlushParam proto.InternalMessageInfo

func (m *FlushParam) GetCollectionNameArray() []string {
	if m != nil {
		return m.CollectionNameArray
	}
	return nil
}

//*
// @brief Flush params
type DeleteByIDParam struct {
	CollectionName       string   `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	IdArray              []int64  `protobuf:"varint,2,rep,packed,name=id_array,json=idArray,proto3" json:"id_array,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteByIDParam) Reset()         { *m = DeleteByIDParam{} }
func (m *DeleteByIDParam) String() string { return proto.CompactTextString(m) }
func (*DeleteByIDParam) ProtoMessage()    {}
func (*DeleteByIDParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{21}
}

func (m *DeleteByIDParam) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteByIDParam.Unmarshal(m, b)
}
func (m *DeleteByIDParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteByIDParam.Marshal(b, m, deterministic)
}
func (m *DeleteByIDParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteByIDParam.Merge(m, src)
}
func (m *DeleteByIDParam) XXX_Size() int {
	return xxx_messageInfo_DeleteByIDParam.Size(m)
}
func (m *DeleteByIDParam) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteByIDParam.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteByIDParam proto.InternalMessageInfo

func (m *DeleteByIDParam) GetCollectionName() string {
	if m != nil {
		return m.CollectionName
	}
	return ""
}

func (m *DeleteByIDParam) GetIdArray() []int64 {
	if m != nil {
		return m.IdArray
	}
	return nil
}

//*
// @brief collection information
type CollectionInfo struct {
	Status               *Status  `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	JsonInfo             string   `protobuf:"bytes,2,opt,name=json_info,json=jsonInfo,proto3" json:"json_info,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CollectionInfo) Reset()         { *m = CollectionInfo{} }
func (m *CollectionInfo) String() string { return proto.CompactTextString(m) }
func (*CollectionInfo) ProtoMessage()    {}
func (*CollectionInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{22}
}

func (m *CollectionInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CollectionInfo.Unmarshal(m, b)
}
func (m *CollectionInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CollectionInfo.Marshal(b, m, deterministic)
}
func (m *CollectionInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CollectionInfo.Merge(m, src)
}
func (m *CollectionInfo) XXX_Size() int {
	return xxx_messageInfo_CollectionInfo.Size(m)
}
func (m *CollectionInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CollectionInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CollectionInfo proto.InternalMessageInfo

func (m *CollectionInfo) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *CollectionInfo) GetJsonInfo() string {
	if m != nil {
		return m.JsonInfo
	}
	return ""
}

//*
// @brief vectors identity
type VectorsIdentity struct {
	CollectionName       string   `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	IdArray              []int64  `protobuf:"varint,2,rep,packed,name=id_array,json=idArray,proto3" json:"id_array,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VectorsIdentity) Reset()         { *m = VectorsIdentity{} }
func (m *VectorsIdentity) String() string { return proto.CompactTextString(m) }
func (*VectorsIdentity) ProtoMessage()    {}
func (*VectorsIdentity) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{23}
}

func (m *VectorsIdentity) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VectorsIdentity.Unmarshal(m, b)
}
func (m *VectorsIdentity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VectorsIdentity.Marshal(b, m, deterministic)
}
func (m *VectorsIdentity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VectorsIdentity.Merge(m, src)
}
func (m *VectorsIdentity) XXX_Size() int {
	return xxx_messageInfo_VectorsIdentity.Size(m)
}
func (m *VectorsIdentity) XXX_DiscardUnknown() {
	xxx_messageInfo_VectorsIdentity.DiscardUnknown(m)
}

var xxx_messageInfo_VectorsIdentity proto.InternalMessageInfo

func (m *VectorsIdentity) GetCollectionName() string {
	if m != nil {
		return m.CollectionName
	}
	return ""
}

func (m *VectorsIdentity) GetIdArray() []int64 {
	if m != nil {
		return m.IdArray
	}
	return nil
}

//*
// @brief vector data
type VectorsData struct {
	Status               *Status      `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	VectorsData          []*RowRecord `protobuf:"bytes,2,rep,name=vectors_data,json=vectorsData,proto3" json:"vectors_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *VectorsData) Reset()         { *m = VectorsData{} }
func (m *VectorsData) String() string { return proto.CompactTextString(m) }
func (*VectorsData) ProtoMessage()    {}
func (*VectorsData) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{24}
}

func (m *VectorsData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VectorsData.Unmarshal(m, b)
}
func (m *VectorsData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VectorsData.Marshal(b, m, deterministic)
}
func (m *VectorsData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VectorsData.Merge(m, src)
}
func (m *VectorsData) XXX_Size() int {
	return xxx_messageInfo_VectorsData.Size(m)
}
func (m *VectorsData) XXX_DiscardUnknown() {
	xxx_messageInfo_VectorsData.DiscardUnknown(m)
}

var xxx_messageInfo_VectorsData proto.InternalMessageInfo

func (m *VectorsData) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *VectorsData) GetVectorsData() []*RowRecord {
	if m != nil {
		return m.VectorsData
	}
	return nil
}

//*
// @brief get vector ids from a segment parameters
type GetVectorIDsParam struct {
	CollectionName       string   `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	SegmentName          string   `protobuf:"bytes,2,opt,name=segment_name,json=segmentName,proto3" json:"segment_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetVectorIDsParam) Reset()         { *m = GetVectorIDsParam{} }
func (m *GetVectorIDsParam) String() string { return proto.CompactTextString(m) }
func (*GetVectorIDsParam) ProtoMessage()    {}
func (*GetVectorIDsParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{25}
}

func (m *GetVectorIDsParam) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetVectorIDsParam.Unmarshal(m, b)
}
func (m *GetVectorIDsParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetVectorIDsParam.Marshal(b, m, deterministic)
}
func (m *GetVectorIDsParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetVectorIDsParam.Merge(m, src)
}
func (m *GetVectorIDsParam) XXX_Size() int {
	return xxx_messageInfo_GetVectorIDsParam.Size(m)
}
func (m *GetVectorIDsParam) XXX_DiscardUnknown() {
	xxx_messageInfo_GetVectorIDsParam.DiscardUnknown(m)
}

var xxx_messageInfo_GetVectorIDsParam proto.InternalMessageInfo

func (m *GetVectorIDsParam) GetCollectionName() string {
	if m != nil {
		return m.CollectionName
	}
	return ""
}

func (m *GetVectorIDsParam) GetSegmentName() string {
	if m != nil {
		return m.SegmentName
	}
	return ""
}

type VectorFieldParam struct {
	Dimension            int64    `protobuf:"varint,1,opt,name=dimension,proto3" json:"dimension,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VectorFieldParam) Reset()         { *m = VectorFieldParam{} }
func (m *VectorFieldParam) String() string { return proto.CompactTextString(m) }
func (*VectorFieldParam) ProtoMessage()    {}
func (*VectorFieldParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{26}
}

func (m *VectorFieldParam) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VectorFieldParam.Unmarshal(m, b)
}
func (m *VectorFieldParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VectorFieldParam.Marshal(b, m, deterministic)
}
func (m *VectorFieldParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VectorFieldParam.Merge(m, src)
}
func (m *VectorFieldParam) XXX_Size() int {
	return xxx_messageInfo_VectorFieldParam.Size(m)
}
func (m *VectorFieldParam) XXX_DiscardUnknown() {
	xxx_messageInfo_VectorFieldParam.DiscardUnknown(m)
}

var xxx_messageInfo_VectorFieldParam proto.InternalMessageInfo

func (m *VectorFieldParam) GetDimension() int64 {
	if m != nil {
		return m.Dimension
	}
	return 0
}

type FieldType struct {
	// Types that are valid to be assigned to Value:
	//	*FieldType_DataType
	//	*FieldType_VectorParam
	Value                isFieldType_Value `protobuf_oneof:"value"`
	XXX_NoUnkeyedLiteral struct{}          `json:"-"`
	XXX_unrecognized     []byte            `json:"-"`
	XXX_sizecache        int32             `json:"-"`
}

func (m *FieldType) Reset()         { *m = FieldType{} }
func (m *FieldType) String() string { return proto.CompactTextString(m) }
func (*FieldType) ProtoMessage()    {}
func (*FieldType) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{27}
}

func (m *FieldType) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FieldType.Unmarshal(m, b)
}
func (m *FieldType) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FieldType.Marshal(b, m, deterministic)
}
func (m *FieldType) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FieldType.Merge(m, src)
}
func (m *FieldType) XXX_Size() int {
	return xxx_messageInfo_FieldType.Size(m)
}
func (m *FieldType) XXX_DiscardUnknown() {
	xxx_messageInfo_FieldType.DiscardUnknown(m)
}

var xxx_messageInfo_FieldType proto.InternalMessageInfo

type isFieldType_Value interface {
	isFieldType_Value()
}

type FieldType_DataType struct {
	DataType DataType `protobuf:"varint,1,opt,name=data_type,json=dataType,proto3,enum=milvus.grpc.DataType,oneof"`
}

type FieldType_VectorParam struct {
	VectorParam *VectorFieldParam `protobuf:"bytes,2,opt,name=vector_param,json=vectorParam,proto3,oneof"`
}

func (*FieldType_DataType) isFieldType_Value() {}

func (*FieldType_VectorParam) isFieldType_Value() {}

func (m *FieldType) GetValue() isFieldType_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *FieldType) GetDataType() DataType {
	if x, ok := m.GetValue().(*FieldType_DataType); ok {
		return x.DataType
	}
	return DataType_NULL
}

func (m *FieldType) GetVectorParam() *VectorFieldParam {
	if x, ok := m.GetValue().(*FieldType_VectorParam); ok {
		return x.VectorParam
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*FieldType) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*FieldType_DataType)(nil),
		(*FieldType_VectorParam)(nil),
	}
}

type FieldParam struct {
	Id                   uint64          `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Type                 *FieldType      `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	ExtraParams          []*KeyValuePair `protobuf:"bytes,4,rep,name=extra_params,json=extraParams,proto3" json:"extra_params,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *FieldParam) Reset()         { *m = FieldParam{} }
func (m *FieldParam) String() string { return proto.CompactTextString(m) }
func (*FieldParam) ProtoMessage()    {}
func (*FieldParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{28}
}

func (m *FieldParam) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FieldParam.Unmarshal(m, b)
}
func (m *FieldParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FieldParam.Marshal(b, m, deterministic)
}
func (m *FieldParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FieldParam.Merge(m, src)
}
func (m *FieldParam) XXX_Size() int {
	return xxx_messageInfo_FieldParam.Size(m)
}
func (m *FieldParam) XXX_DiscardUnknown() {
	xxx_messageInfo_FieldParam.DiscardUnknown(m)
}

var xxx_messageInfo_FieldParam proto.InternalMessageInfo

func (m *FieldParam) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *FieldParam) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *FieldParam) GetType() *FieldType {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *FieldParam) GetExtraParams() []*KeyValuePair {
	if m != nil {
		return m.ExtraParams
	}
	return nil
}

type VectorFieldValue struct {
	Value                []*RowRecord `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *VectorFieldValue) Reset()         { *m = VectorFieldValue{} }
func (m *VectorFieldValue) String() string { return proto.CompactTextString(m) }
func (*VectorFieldValue) ProtoMessage()    {}
func (*VectorFieldValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{29}
}

func (m *VectorFieldValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VectorFieldValue.Unmarshal(m, b)
}
func (m *VectorFieldValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VectorFieldValue.Marshal(b, m, deterministic)
}
func (m *VectorFieldValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VectorFieldValue.Merge(m, src)
}
func (m *VectorFieldValue) XXX_Size() int {
	return xxx_messageInfo_VectorFieldValue.Size(m)
}
func (m *VectorFieldValue) XXX_DiscardUnknown() {
	xxx_messageInfo_VectorFieldValue.DiscardUnknown(m)
}

var xxx_messageInfo_VectorFieldValue proto.InternalMessageInfo

func (m *VectorFieldValue) GetValue() []*RowRecord {
	if m != nil {
		return m.Value
	}
	return nil
}

type FieldValue struct {
	// Types that are valid to be assigned to Value:
	//	*FieldValue_Int32Value
	//	*FieldValue_Int64Value
	//	*FieldValue_FloatValue
	//	*FieldValue_DoubleValue
	//	*FieldValue_StringValue
	//	*FieldValue_BoolValue
	//	*FieldValue_VectorValue
	Value                isFieldValue_Value `protobuf_oneof:"value"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *FieldValue) Reset()         { *m = FieldValue{} }
func (m *FieldValue) String() string { return proto.CompactTextString(m) }
func (*FieldValue) ProtoMessage()    {}
func (*FieldValue) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{30}
}

func (m *FieldValue) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FieldValue.Unmarshal(m, b)
}
func (m *FieldValue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FieldValue.Marshal(b, m, deterministic)
}
func (m *FieldValue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FieldValue.Merge(m, src)
}
func (m *FieldValue) XXX_Size() int {
	return xxx_messageInfo_FieldValue.Size(m)
}
func (m *FieldValue) XXX_DiscardUnknown() {
	xxx_messageInfo_FieldValue.DiscardUnknown(m)
}

var xxx_messageInfo_FieldValue proto.InternalMessageInfo

type isFieldValue_Value interface {
	isFieldValue_Value()
}

type FieldValue_Int32Value struct {
	Int32Value int32 `protobuf:"varint,1,opt,name=int32_value,json=int32Value,proto3,oneof"`
}

type FieldValue_Int64Value struct {
	Int64Value int64 `protobuf:"varint,2,opt,name=int64_value,json=int64Value,proto3,oneof"`
}

type FieldValue_FloatValue struct {
	FloatValue float32 `protobuf:"fixed32,3,opt,name=float_value,json=floatValue,proto3,oneof"`
}

type FieldValue_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,4,opt,name=double_value,json=doubleValue,proto3,oneof"`
}

type FieldValue_StringValue struct {
	StringValue string `protobuf:"bytes,5,opt,name=string_value,json=stringValue,proto3,oneof"`
}

type FieldValue_BoolValue struct {
	BoolValue bool `protobuf:"varint,6,opt,name=bool_value,json=boolValue,proto3,oneof"`
}

type FieldValue_VectorValue struct {
	VectorValue *VectorFieldValue `protobuf:"bytes,7,opt,name=vector_value,json=vectorValue,proto3,oneof"`
}

func (*FieldValue_Int32Value) isFieldValue_Value() {}

func (*FieldValue_Int64Value) isFieldValue_Value() {}

func (*FieldValue_FloatValue) isFieldValue_Value() {}

func (*FieldValue_DoubleValue) isFieldValue_Value() {}

func (*FieldValue_StringValue) isFieldValue_Value() {}

func (*FieldValue_BoolValue) isFieldValue_Value() {}

func (*FieldValue_VectorValue) isFieldValue_Value() {}

func (m *FieldValue) GetValue() isFieldValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (m *FieldValue) GetInt32Value() int32 {
	if x, ok := m.GetValue().(*FieldValue_Int32Value); ok {
		return x.Int32Value
	}
	return 0
}

func (m *FieldValue) GetInt64Value() int64 {
	if x, ok := m.GetValue().(*FieldValue_Int64Value); ok {
		return x.Int64Value
	}
	return 0
}

func (m *FieldValue) GetFloatValue() float32 {
	if x, ok := m.GetValue().(*FieldValue_FloatValue); ok {
		return x.FloatValue
	}
	return 0
}

func (m *FieldValue) GetDoubleValue() float64 {
	if x, ok := m.GetValue().(*FieldValue_DoubleValue); ok {
		return x.DoubleValue
	}
	return 0
}

func (m *FieldValue) GetStringValue() string {
	if x, ok := m.GetValue().(*FieldValue_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (m *FieldValue) GetBoolValue() bool {
	if x, ok := m.GetValue().(*FieldValue_BoolValue); ok {
		return x.BoolValue
	}
	return false
}

func (m *FieldValue) GetVectorValue() *VectorFieldValue {
	if x, ok := m.GetValue().(*FieldValue_VectorValue); ok {
		return x.VectorValue
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*FieldValue) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*FieldValue_Int32Value)(nil),
		(*FieldValue_Int64Value)(nil),
		(*FieldValue_FloatValue)(nil),
		(*FieldValue_DoubleValue)(nil),
		(*FieldValue_StringValue)(nil),
		(*FieldValue_BoolValue)(nil),
		(*FieldValue_VectorValue)(nil),
	}
}

type Mapping struct {
	Status               *Status       `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	CollectionId         uint64        `protobuf:"varint,2,opt,name=collection_id,json=collectionId,proto3" json:"collection_id,omitempty"`
	CollectionName       string        `protobuf:"bytes,3,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	Fields               []*FieldParam `protobuf:"bytes,4,rep,name=fields,proto3" json:"fields,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *Mapping) Reset()         { *m = Mapping{} }
func (m *Mapping) String() string { return proto.CompactTextString(m) }
func (*Mapping) ProtoMessage()    {}
func (*Mapping) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{31}
}

func (m *Mapping) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Mapping.Unmarshal(m, b)
}
func (m *Mapping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Mapping.Marshal(b, m, deterministic)
}
func (m *Mapping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Mapping.Merge(m, src)
}
func (m *Mapping) XXX_Size() int {
	return xxx_messageInfo_Mapping.Size(m)
}
func (m *Mapping) XXX_DiscardUnknown() {
	xxx_messageInfo_Mapping.DiscardUnknown(m)
}

var xxx_messageInfo_Mapping proto.InternalMessageInfo

func (m *Mapping) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *Mapping) GetCollectionId() uint64 {
	if m != nil {
		return m.CollectionId
	}
	return 0
}

func (m *Mapping) GetCollectionName() string {
	if m != nil {
		return m.CollectionName
	}
	return ""
}

func (m *Mapping) GetFields() []*FieldParam {
	if m != nil {
		return m.Fields
	}
	return nil
}

type MappingList struct {
	Status               *Status    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	MappingList          []*Mapping `protobuf:"bytes,2,rep,name=mapping_list,json=mappingList,proto3" json:"mapping_list,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *MappingList) Reset()         { *m = MappingList{} }
func (m *MappingList) String() string { return proto.CompactTextString(m) }
func (*MappingList) ProtoMessage()    {}
func (*MappingList) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{32}
}

func (m *MappingList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_MappingList.Unmarshal(m, b)
}
func (m *MappingList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_MappingList.Marshal(b, m, deterministic)
}
func (m *MappingList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MappingList.Merge(m, src)
}
func (m *MappingList) XXX_Size() int {
	return xxx_messageInfo_MappingList.Size(m)
}
func (m *MappingList) XXX_DiscardUnknown() {
	xxx_messageInfo_MappingList.DiscardUnknown(m)
}

var xxx_messageInfo_MappingList proto.InternalMessageInfo

func (m *MappingList) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *MappingList) GetMappingList() []*Mapping {
	if m != nil {
		return m.MappingList
	}
	return nil
}

type TermQuery struct {
	FieldName            string          `protobuf:"bytes,1,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
	Values               []byte          `protobuf:"bytes,2,opt,name=values,proto3" json:"values,omitempty"`
	ValueNum             int64           `protobuf:"varint,3,opt,name=value_num,json=valueNum,proto3" json:"value_num,omitempty"`
	Boost                float32         `protobuf:"fixed32,4,opt,name=boost,proto3" json:"boost,omitempty"`
	ExtraParams          []*KeyValuePair `protobuf:"bytes,5,rep,name=extra_params,json=extraParams,proto3" json:"extra_params,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *TermQuery) Reset()         { *m = TermQuery{} }
func (m *TermQuery) String() string { return proto.CompactTextString(m) }
func (*TermQuery) ProtoMessage()    {}
func (*TermQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{33}
}

func (m *TermQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TermQuery.Unmarshal(m, b)
}
func (m *TermQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TermQuery.Marshal(b, m, deterministic)
}
func (m *TermQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TermQuery.Merge(m, src)
}
func (m *TermQuery) XXX_Size() int {
	return xxx_messageInfo_TermQuery.Size(m)
}
func (m *TermQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_TermQuery.DiscardUnknown(m)
}

var xxx_messageInfo_TermQuery proto.InternalMessageInfo

func (m *TermQuery) GetFieldName() string {
	if m != nil {
		return m.FieldName
	}
	return ""
}

func (m *TermQuery) GetValues() []byte {
	if m != nil {
		return m.Values
	}
	return nil
}

func (m *TermQuery) GetValueNum() int64 {
	if m != nil {
		return m.ValueNum
	}
	return 0
}

func (m *TermQuery) GetBoost() float32 {
	if m != nil {
		return m.Boost
	}
	return 0
}

func (m *TermQuery) GetExtraParams() []*KeyValuePair {
	if m != nil {
		return m.ExtraParams
	}
	return nil
}

type CompareExpr struct {
	Operator             CompareOperator `protobuf:"varint,1,opt,name=operator,proto3,enum=milvus.grpc.CompareOperator" json:"operator,omitempty"`
	Operand              string          `protobuf:"bytes,2,opt,name=operand,proto3" json:"operand,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *CompareExpr) Reset()         { *m = CompareExpr{} }
func (m *CompareExpr) String() string { return proto.CompactTextString(m) }
func (*CompareExpr) ProtoMessage()    {}
func (*CompareExpr) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{34}
}

func (m *CompareExpr) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CompareExpr.Unmarshal(m, b)
}
func (m *CompareExpr) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CompareExpr.Marshal(b, m, deterministic)
}
func (m *CompareExpr) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CompareExpr.Merge(m, src)
}
func (m *CompareExpr) XXX_Size() int {
	return xxx_messageInfo_CompareExpr.Size(m)
}
func (m *CompareExpr) XXX_DiscardUnknown() {
	xxx_messageInfo_CompareExpr.DiscardUnknown(m)
}

var xxx_messageInfo_CompareExpr proto.InternalMessageInfo

func (m *CompareExpr) GetOperator() CompareOperator {
	if m != nil {
		return m.Operator
	}
	return CompareOperator_LT
}

func (m *CompareExpr) GetOperand() string {
	if m != nil {
		return m.Operand
	}
	return ""
}

type RangeQuery struct {
	FieldName            string          `protobuf:"bytes,1,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
	Operand              []*CompareExpr  `protobuf:"bytes,2,rep,name=operand,proto3" json:"operand,omitempty"`
	Boost                float32         `protobuf:"fixed32,3,opt,name=boost,proto3" json:"boost,omitempty"`
	ExtraParams          []*KeyValuePair `protobuf:"bytes,4,rep,name=extra_params,json=extraParams,proto3" json:"extra_params,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *RangeQuery) Reset()         { *m = RangeQuery{} }
func (m *RangeQuery) String() string { return proto.CompactTextString(m) }
func (*RangeQuery) ProtoMessage()    {}
func (*RangeQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{35}
}

func (m *RangeQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RangeQuery.Unmarshal(m, b)
}
func (m *RangeQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RangeQuery.Marshal(b, m, deterministic)
}
func (m *RangeQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RangeQuery.Merge(m, src)
}
func (m *RangeQuery) XXX_Size() int {
	return xxx_messageInfo_RangeQuery.Size(m)
}
func (m *RangeQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_RangeQuery.DiscardUnknown(m)
}

var xxx_messageInfo_RangeQuery proto.InternalMessageInfo

func (m *RangeQuery) GetFieldName() string {
	if m != nil {
		return m.FieldName
	}
	return ""
}

func (m *RangeQuery) GetOperand() []*CompareExpr {
	if m != nil {
		return m.Operand
	}
	return nil
}

func (m *RangeQuery) GetBoost() float32 {
	if m != nil {
		return m.Boost
	}
	return 0
}

func (m *RangeQuery) GetExtraParams() []*KeyValuePair {
	if m != nil {
		return m.ExtraParams
	}
	return nil
}

type VectorQuery struct {
	FieldName            string          `protobuf:"bytes,1,opt,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
	QueryBoost           float32         `protobuf:"fixed32,2,opt,name=query_boost,json=queryBoost,proto3" json:"query_boost,omitempty"`
	Records              []*RowRecord    `protobuf:"bytes,3,rep,name=records,proto3" json:"records,omitempty"`
	Topk                 int64           `protobuf:"varint,4,opt,name=topk,proto3" json:"topk,omitempty"`
	ExtraParams          []*KeyValuePair `protobuf:"bytes,5,rep,name=extra_params,json=extraParams,proto3" json:"extra_params,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *VectorQuery) Reset()         { *m = VectorQuery{} }
func (m *VectorQuery) String() string { return proto.CompactTextString(m) }
func (*VectorQuery) ProtoMessage()    {}
func (*VectorQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{36}
}

func (m *VectorQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VectorQuery.Unmarshal(m, b)
}
func (m *VectorQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VectorQuery.Marshal(b, m, deterministic)
}
func (m *VectorQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VectorQuery.Merge(m, src)
}
func (m *VectorQuery) XXX_Size() int {
	return xxx_messageInfo_VectorQuery.Size(m)
}
func (m *VectorQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_VectorQuery.DiscardUnknown(m)
}

var xxx_messageInfo_VectorQuery proto.InternalMessageInfo

func (m *VectorQuery) GetFieldName() string {
	if m != nil {
		return m.FieldName
	}
	return ""
}

func (m *VectorQuery) GetQueryBoost() float32 {
	if m != nil {
		return m.QueryBoost
	}
	return 0
}

func (m *VectorQuery) GetRecords() []*RowRecord {
	if m != nil {
		return m.Records
	}
	return nil
}

func (m *VectorQuery) GetTopk() int64 {
	if m != nil {
		return m.Topk
	}
	return 0
}

func (m *VectorQuery) GetExtraParams() []*KeyValuePair {
	if m != nil {
		return m.ExtraParams
	}
	return nil
}

type BooleanQuery struct {
	Occur                Occur           `protobuf:"varint,1,opt,name=occur,proto3,enum=milvus.grpc.Occur" json:"occur,omitempty"`
	GeneralQuery         []*GeneralQuery `protobuf:"bytes,2,rep,name=general_query,json=generalQuery,proto3" json:"general_query,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *BooleanQuery) Reset()         { *m = BooleanQuery{} }
func (m *BooleanQuery) String() string { return proto.CompactTextString(m) }
func (*BooleanQuery) ProtoMessage()    {}
func (*BooleanQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{37}
}

func (m *BooleanQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BooleanQuery.Unmarshal(m, b)
}
func (m *BooleanQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BooleanQuery.Marshal(b, m, deterministic)
}
func (m *BooleanQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BooleanQuery.Merge(m, src)
}
func (m *BooleanQuery) XXX_Size() int {
	return xxx_messageInfo_BooleanQuery.Size(m)
}
func (m *BooleanQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_BooleanQuery.DiscardUnknown(m)
}

var xxx_messageInfo_BooleanQuery proto.InternalMessageInfo

func (m *BooleanQuery) GetOccur() Occur {
	if m != nil {
		return m.Occur
	}
	return Occur_INVALID
}

func (m *BooleanQuery) GetGeneralQuery() []*GeneralQuery {
	if m != nil {
		return m.GeneralQuery
	}
	return nil
}

type GeneralQuery struct {
	// Types that are valid to be assigned to Query:
	//	*GeneralQuery_BooleanQuery
	//	*GeneralQuery_TermQuery
	//	*GeneralQuery_RangeQuery
	//	*GeneralQuery_VectorQuery
	Query                isGeneralQuery_Query `protobuf_oneof:"query"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *GeneralQuery) Reset()         { *m = GeneralQuery{} }
func (m *GeneralQuery) String() string { return proto.CompactTextString(m) }
func (*GeneralQuery) ProtoMessage()    {}
func (*GeneralQuery) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{38}
}

func (m *GeneralQuery) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GeneralQuery.Unmarshal(m, b)
}
func (m *GeneralQuery) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GeneralQuery.Marshal(b, m, deterministic)
}
func (m *GeneralQuery) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GeneralQuery.Merge(m, src)
}
func (m *GeneralQuery) XXX_Size() int {
	return xxx_messageInfo_GeneralQuery.Size(m)
}
func (m *GeneralQuery) XXX_DiscardUnknown() {
	xxx_messageInfo_GeneralQuery.DiscardUnknown(m)
}

var xxx_messageInfo_GeneralQuery proto.InternalMessageInfo

type isGeneralQuery_Query interface {
	isGeneralQuery_Query()
}

type GeneralQuery_BooleanQuery struct {
	BooleanQuery *BooleanQuery `protobuf:"bytes,1,opt,name=boolean_query,json=booleanQuery,proto3,oneof"`
}

type GeneralQuery_TermQuery struct {
	TermQuery *TermQuery `protobuf:"bytes,2,opt,name=term_query,json=termQuery,proto3,oneof"`
}

type GeneralQuery_RangeQuery struct {
	RangeQuery *RangeQuery `protobuf:"bytes,3,opt,name=range_query,json=rangeQuery,proto3,oneof"`
}

type GeneralQuery_VectorQuery struct {
	VectorQuery *VectorQuery `protobuf:"bytes,4,opt,name=vector_query,json=vectorQuery,proto3,oneof"`
}

func (*GeneralQuery_BooleanQuery) isGeneralQuery_Query() {}

func (*GeneralQuery_TermQuery) isGeneralQuery_Query() {}

func (*GeneralQuery_RangeQuery) isGeneralQuery_Query() {}

func (*GeneralQuery_VectorQuery) isGeneralQuery_Query() {}

func (m *GeneralQuery) GetQuery() isGeneralQuery_Query {
	if m != nil {
		return m.Query
	}
	return nil
}

func (m *GeneralQuery) GetBooleanQuery() *BooleanQuery {
	if x, ok := m.GetQuery().(*GeneralQuery_BooleanQuery); ok {
		return x.BooleanQuery
	}
	return nil
}

func (m *GeneralQuery) GetTermQuery() *TermQuery {
	if x, ok := m.GetQuery().(*GeneralQuery_TermQuery); ok {
		return x.TermQuery
	}
	return nil
}

func (m *GeneralQuery) GetRangeQuery() *RangeQuery {
	if x, ok := m.GetQuery().(*GeneralQuery_RangeQuery); ok {
		return x.RangeQuery
	}
	return nil
}

func (m *GeneralQuery) GetVectorQuery() *VectorQuery {
	if x, ok := m.GetQuery().(*GeneralQuery_VectorQuery); ok {
		return x.VectorQuery
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*GeneralQuery) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*GeneralQuery_BooleanQuery)(nil),
		(*GeneralQuery_TermQuery)(nil),
		(*GeneralQuery_RangeQuery)(nil),
		(*GeneralQuery_VectorQuery)(nil),
	}
}

type HSearchParam struct {
	CollectionName       string          `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	PartitionTagArray    []string        `protobuf:"bytes,2,rep,name=partition_tag_array,json=partitionTagArray,proto3" json:"partition_tag_array,omitempty"`
	GeneralQuery         *GeneralQuery   `protobuf:"bytes,3,opt,name=general_query,json=generalQuery,proto3" json:"general_query,omitempty"`
	ExtraParams          []*KeyValuePair `protobuf:"bytes,4,rep,name=extra_params,json=extraParams,proto3" json:"extra_params,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *HSearchParam) Reset()         { *m = HSearchParam{} }
func (m *HSearchParam) String() string { return proto.CompactTextString(m) }
func (*HSearchParam) ProtoMessage()    {}
func (*HSearchParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{39}
}

func (m *HSearchParam) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HSearchParam.Unmarshal(m, b)
}
func (m *HSearchParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HSearchParam.Marshal(b, m, deterministic)
}
func (m *HSearchParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HSearchParam.Merge(m, src)
}
func (m *HSearchParam) XXX_Size() int {
	return xxx_messageInfo_HSearchParam.Size(m)
}
func (m *HSearchParam) XXX_DiscardUnknown() {
	xxx_messageInfo_HSearchParam.DiscardUnknown(m)
}

var xxx_messageInfo_HSearchParam proto.InternalMessageInfo

func (m *HSearchParam) GetCollectionName() string {
	if m != nil {
		return m.CollectionName
	}
	return ""
}

func (m *HSearchParam) GetPartitionTagArray() []string {
	if m != nil {
		return m.PartitionTagArray
	}
	return nil
}

func (m *HSearchParam) GetGeneralQuery() *GeneralQuery {
	if m != nil {
		return m.GeneralQuery
	}
	return nil
}

func (m *HSearchParam) GetExtraParams() []*KeyValuePair {
	if m != nil {
		return m.ExtraParams
	}
	return nil
}

type HSearchInSegmentsParam struct {
	SegmentIdArray       []string      `protobuf:"bytes,1,rep,name=segment_id_array,json=segmentIdArray,proto3" json:"segment_id_array,omitempty"`
	SearchParam          *HSearchParam `protobuf:"bytes,2,opt,name=search_param,json=searchParam,proto3" json:"search_param,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *HSearchInSegmentsParam) Reset()         { *m = HSearchInSegmentsParam{} }
func (m *HSearchInSegmentsParam) String() string { return proto.CompactTextString(m) }
func (*HSearchInSegmentsParam) ProtoMessage()    {}
func (*HSearchInSegmentsParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{40}
}

func (m *HSearchInSegmentsParam) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HSearchInSegmentsParam.Unmarshal(m, b)
}
func (m *HSearchInSegmentsParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HSearchInSegmentsParam.Marshal(b, m, deterministic)
}
func (m *HSearchInSegmentsParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HSearchInSegmentsParam.Merge(m, src)
}
func (m *HSearchInSegmentsParam) XXX_Size() int {
	return xxx_messageInfo_HSearchInSegmentsParam.Size(m)
}
func (m *HSearchInSegmentsParam) XXX_DiscardUnknown() {
	xxx_messageInfo_HSearchInSegmentsParam.DiscardUnknown(m)
}

var xxx_messageInfo_HSearchInSegmentsParam proto.InternalMessageInfo

func (m *HSearchInSegmentsParam) GetSegmentIdArray() []string {
	if m != nil {
		return m.SegmentIdArray
	}
	return nil
}

func (m *HSearchInSegmentsParam) GetSearchParam() *HSearchParam {
	if m != nil {
		return m.SearchParam
	}
	return nil
}

type AttrRecord struct {
	Value                []string `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AttrRecord) Reset()         { *m = AttrRecord{} }
func (m *AttrRecord) String() string { return proto.CompactTextString(m) }
func (*AttrRecord) ProtoMessage()    {}
func (*AttrRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{41}
}

func (m *AttrRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AttrRecord.Unmarshal(m, b)
}
func (m *AttrRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AttrRecord.Marshal(b, m, deterministic)
}
func (m *AttrRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AttrRecord.Merge(m, src)
}
func (m *AttrRecord) XXX_Size() int {
	return xxx_messageInfo_AttrRecord.Size(m)
}
func (m *AttrRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_AttrRecord.DiscardUnknown(m)
}

var xxx_messageInfo_AttrRecord proto.InternalMessageInfo

func (m *AttrRecord) GetValue() []string {
	if m != nil {
		return m.Value
	}
	return nil
}

type HEntity struct {
	Status               *Status       `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	EntityId             int64         `protobuf:"varint,2,opt,name=entity_id,json=entityId,proto3" json:"entity_id,omitempty"`
	FieldNames           []string      `protobuf:"bytes,3,rep,name=field_names,json=fieldNames,proto3" json:"field_names,omitempty"`
	AttrRecords          []byte        `protobuf:"bytes,4,opt,name=attr_records,json=attrRecords,proto3" json:"attr_records,omitempty"`
	RowNum               int64         `protobuf:"varint,5,opt,name=row_num,json=rowNum,proto3" json:"row_num,omitempty"`
	ResultValues         []*FieldValue `protobuf:"bytes,6,rep,name=result_values,json=resultValues,proto3" json:"result_values,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *HEntity) Reset()         { *m = HEntity{} }
func (m *HEntity) String() string { return proto.CompactTextString(m) }
func (*HEntity) ProtoMessage()    {}
func (*HEntity) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{42}
}

func (m *HEntity) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HEntity.Unmarshal(m, b)
}
func (m *HEntity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HEntity.Marshal(b, m, deterministic)
}
func (m *HEntity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HEntity.Merge(m, src)
}
func (m *HEntity) XXX_Size() int {
	return xxx_messageInfo_HEntity.Size(m)
}
func (m *HEntity) XXX_DiscardUnknown() {
	xxx_messageInfo_HEntity.DiscardUnknown(m)
}

var xxx_messageInfo_HEntity proto.InternalMessageInfo

func (m *HEntity) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *HEntity) GetEntityId() int64 {
	if m != nil {
		return m.EntityId
	}
	return 0
}

func (m *HEntity) GetFieldNames() []string {
	if m != nil {
		return m.FieldNames
	}
	return nil
}

func (m *HEntity) GetAttrRecords() []byte {
	if m != nil {
		return m.AttrRecords
	}
	return nil
}

func (m *HEntity) GetRowNum() int64 {
	if m != nil {
		return m.RowNum
	}
	return 0
}

func (m *HEntity) GetResultValues() []*FieldValue {
	if m != nil {
		return m.ResultValues
	}
	return nil
}

type HQueryResult struct {
	Status               *Status    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	Entities             []*HEntity `protobuf:"bytes,2,rep,name=entities,proto3" json:"entities,omitempty"`
	RowNum               int64      `protobuf:"varint,3,opt,name=row_num,json=rowNum,proto3" json:"row_num,omitempty"`
	Score                []float32  `protobuf:"fixed32,4,rep,packed,name=score,proto3" json:"score,omitempty"`
	Distance             []float32  `protobuf:"fixed32,5,rep,packed,name=distance,proto3" json:"distance,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *HQueryResult) Reset()         { *m = HQueryResult{} }
func (m *HQueryResult) String() string { return proto.CompactTextString(m) }
func (*HQueryResult) ProtoMessage()    {}
func (*HQueryResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{43}
}

func (m *HQueryResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HQueryResult.Unmarshal(m, b)
}
func (m *HQueryResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HQueryResult.Marshal(b, m, deterministic)
}
func (m *HQueryResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HQueryResult.Merge(m, src)
}
func (m *HQueryResult) XXX_Size() int {
	return xxx_messageInfo_HQueryResult.Size(m)
}
func (m *HQueryResult) XXX_DiscardUnknown() {
	xxx_messageInfo_HQueryResult.DiscardUnknown(m)
}

var xxx_messageInfo_HQueryResult proto.InternalMessageInfo

func (m *HQueryResult) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *HQueryResult) GetEntities() []*HEntity {
	if m != nil {
		return m.Entities
	}
	return nil
}

func (m *HQueryResult) GetRowNum() int64 {
	if m != nil {
		return m.RowNum
	}
	return 0
}

func (m *HQueryResult) GetScore() []float32 {
	if m != nil {
		return m.Score
	}
	return nil
}

func (m *HQueryResult) GetDistance() []float32 {
	if m != nil {
		return m.Distance
	}
	return nil
}

type HInsertParam struct {
	CollectionName       string          `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	PartitionTag         string          `protobuf:"bytes,2,opt,name=partition_tag,json=partitionTag,proto3" json:"partition_tag,omitempty"`
	Entities             *HEntity        `protobuf:"bytes,3,opt,name=entities,proto3" json:"entities,omitempty"`
	EntityIdArray        []int64         `protobuf:"varint,4,rep,packed,name=entity_id_array,json=entityIdArray,proto3" json:"entity_id_array,omitempty"`
	ExtraParams          []*KeyValuePair `protobuf:"bytes,5,rep,name=extra_params,json=extraParams,proto3" json:"extra_params,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *HInsertParam) Reset()         { *m = HInsertParam{} }
func (m *HInsertParam) String() string { return proto.CompactTextString(m) }
func (*HInsertParam) ProtoMessage()    {}
func (*HInsertParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{44}
}

func (m *HInsertParam) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HInsertParam.Unmarshal(m, b)
}
func (m *HInsertParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HInsertParam.Marshal(b, m, deterministic)
}
func (m *HInsertParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HInsertParam.Merge(m, src)
}
func (m *HInsertParam) XXX_Size() int {
	return xxx_messageInfo_HInsertParam.Size(m)
}
func (m *HInsertParam) XXX_DiscardUnknown() {
	xxx_messageInfo_HInsertParam.DiscardUnknown(m)
}

var xxx_messageInfo_HInsertParam proto.InternalMessageInfo

func (m *HInsertParam) GetCollectionName() string {
	if m != nil {
		return m.CollectionName
	}
	return ""
}

func (m *HInsertParam) GetPartitionTag() string {
	if m != nil {
		return m.PartitionTag
	}
	return ""
}

func (m *HInsertParam) GetEntities() *HEntity {
	if m != nil {
		return m.Entities
	}
	return nil
}

func (m *HInsertParam) GetEntityIdArray() []int64 {
	if m != nil {
		return m.EntityIdArray
	}
	return nil
}

func (m *HInsertParam) GetExtraParams() []*KeyValuePair {
	if m != nil {
		return m.ExtraParams
	}
	return nil
}

type HEntityIdentity struct {
	CollectionName       string   `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	Id                   int64    `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HEntityIdentity) Reset()         { *m = HEntityIdentity{} }
func (m *HEntityIdentity) String() string { return proto.CompactTextString(m) }
func (*HEntityIdentity) ProtoMessage()    {}
func (*HEntityIdentity) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{45}
}

func (m *HEntityIdentity) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HEntityIdentity.Unmarshal(m, b)
}
func (m *HEntityIdentity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HEntityIdentity.Marshal(b, m, deterministic)
}
func (m *HEntityIdentity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HEntityIdentity.Merge(m, src)
}
func (m *HEntityIdentity) XXX_Size() int {
	return xxx_messageInfo_HEntityIdentity.Size(m)
}
func (m *HEntityIdentity) XXX_DiscardUnknown() {
	xxx_messageInfo_HEntityIdentity.DiscardUnknown(m)
}

var xxx_messageInfo_HEntityIdentity proto.InternalMessageInfo

func (m *HEntityIdentity) GetCollectionName() string {
	if m != nil {
		return m.CollectionName
	}
	return ""
}

func (m *HEntityIdentity) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type HEntityIDs struct {
	Status               *Status  `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	EntityIdArray        []int64  `protobuf:"varint,2,rep,packed,name=entity_id_array,json=entityIdArray,proto3" json:"entity_id_array,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HEntityIDs) Reset()         { *m = HEntityIDs{} }
func (m *HEntityIDs) String() string { return proto.CompactTextString(m) }
func (*HEntityIDs) ProtoMessage()    {}
func (*HEntityIDs) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{46}
}

func (m *HEntityIDs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HEntityIDs.Unmarshal(m, b)
}
func (m *HEntityIDs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HEntityIDs.Marshal(b, m, deterministic)
}
func (m *HEntityIDs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HEntityIDs.Merge(m, src)
}
func (m *HEntityIDs) XXX_Size() int {
	return xxx_messageInfo_HEntityIDs.Size(m)
}
func (m *HEntityIDs) XXX_DiscardUnknown() {
	xxx_messageInfo_HEntityIDs.DiscardUnknown(m)
}

var xxx_messageInfo_HEntityIDs proto.InternalMessageInfo

func (m *HEntityIDs) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *HEntityIDs) GetEntityIdArray() []int64 {
	if m != nil {
		return m.EntityIdArray
	}
	return nil
}

type HGetEntityIDsParam struct {
	CollectionName       string   `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	SegmentName          string   `protobuf:"bytes,2,opt,name=segment_name,json=segmentName,proto3" json:"segment_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HGetEntityIDsParam) Reset()         { *m = HGetEntityIDsParam{} }
func (m *HGetEntityIDsParam) String() string { return proto.CompactTextString(m) }
func (*HGetEntityIDsParam) ProtoMessage()    {}
func (*HGetEntityIDsParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{47}
}

func (m *HGetEntityIDsParam) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HGetEntityIDsParam.Unmarshal(m, b)
}
func (m *HGetEntityIDsParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HGetEntityIDsParam.Marshal(b, m, deterministic)
}
func (m *HGetEntityIDsParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HGetEntityIDsParam.Merge(m, src)
}
func (m *HGetEntityIDsParam) XXX_Size() int {
	return xxx_messageInfo_HGetEntityIDsParam.Size(m)
}
func (m *HGetEntityIDsParam) XXX_DiscardUnknown() {
	xxx_messageInfo_HGetEntityIDsParam.DiscardUnknown(m)
}

var xxx_messageInfo_HGetEntityIDsParam proto.InternalMessageInfo

func (m *HGetEntityIDsParam) GetCollectionName() string {
	if m != nil {
		return m.CollectionName
	}
	return ""
}

func (m *HGetEntityIDsParam) GetSegmentName() string {
	if m != nil {
		return m.SegmentName
	}
	return ""
}

type HDeleteByIDParam struct {
	CollectionName       string   `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	IdArray              []int64  `protobuf:"varint,2,rep,packed,name=id_array,json=idArray,proto3" json:"id_array,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *HDeleteByIDParam) Reset()         { *m = HDeleteByIDParam{} }
func (m *HDeleteByIDParam) String() string { return proto.CompactTextString(m) }
func (*HDeleteByIDParam) ProtoMessage()    {}
func (*HDeleteByIDParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{48}
}

func (m *HDeleteByIDParam) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HDeleteByIDParam.Unmarshal(m, b)
}
func (m *HDeleteByIDParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HDeleteByIDParam.Marshal(b, m, deterministic)
}
func (m *HDeleteByIDParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HDeleteByIDParam.Merge(m, src)
}
func (m *HDeleteByIDParam) XXX_Size() int {
	return xxx_messageInfo_HDeleteByIDParam.Size(m)
}
func (m *HDeleteByIDParam) XXX_DiscardUnknown() {
	xxx_messageInfo_HDeleteByIDParam.DiscardUnknown(m)
}

var xxx_messageInfo_HDeleteByIDParam proto.InternalMessageInfo

func (m *HDeleteByIDParam) GetCollectionName() string {
	if m != nil {
		return m.CollectionName
	}
	return ""
}

func (m *HDeleteByIDParam) GetIdArray() []int64 {
	if m != nil {
		return m.IdArray
	}
	return nil
}

type HIndexParam struct {
	Status               *Status         `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	CollectionName       string          `protobuf:"bytes,2,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	IndexType            int32           `protobuf:"varint,3,opt,name=index_type,json=indexType,proto3" json:"index_type,omitempty"`
	ExtraParams          []*KeyValuePair `protobuf:"bytes,4,rep,name=extra_params,json=extraParams,proto3" json:"extra_params,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *HIndexParam) Reset()         { *m = HIndexParam{} }
func (m *HIndexParam) String() string { return proto.CompactTextString(m) }
func (*HIndexParam) ProtoMessage()    {}
func (*HIndexParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{49}
}

func (m *HIndexParam) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_HIndexParam.Unmarshal(m, b)
}
func (m *HIndexParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_HIndexParam.Marshal(b, m, deterministic)
}
func (m *HIndexParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HIndexParam.Merge(m, src)
}
func (m *HIndexParam) XXX_Size() int {
	return xxx_messageInfo_HIndexParam.Size(m)
}
func (m *HIndexParam) XXX_DiscardUnknown() {
	xxx_messageInfo_HIndexParam.DiscardUnknown(m)
}

var xxx_messageInfo_HIndexParam proto.InternalMessageInfo

func (m *HIndexParam) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *HIndexParam) GetCollectionName() string {
	if m != nil {
		return m.CollectionName
	}
	return ""
}

func (m *HIndexParam) GetIndexType() int32 {
	if m != nil {
		return m.IndexType
	}
	return 0
}

func (m *HIndexParam) GetExtraParams() []*KeyValuePair {
	if m != nil {
		return m.ExtraParams
	}
	return nil
}

func init() {
	proto.RegisterEnum("milvus.grpc.DataType", DataType_name, DataType_value)
	proto.RegisterEnum("milvus.grpc.CompareOperator", CompareOperator_name, CompareOperator_value)
	proto.RegisterEnum("milvus.grpc.Occur", Occur_name, Occur_value)
	proto.RegisterType((*KeyValuePair)(nil), "milvus.grpc.KeyValuePair")
	proto.RegisterType((*CollectionName)(nil), "milvus.grpc.CollectionName")
	proto.RegisterType((*CollectionNameList)(nil), "milvus.grpc.CollectionNameList")
	proto.RegisterType((*CollectionSchema)(nil), "milvus.grpc.CollectionSchema")
	proto.RegisterType((*PartitionParam)(nil), "milvus.grpc.PartitionParam")
	proto.RegisterType((*PartitionList)(nil), "milvus.grpc.PartitionList")
	proto.RegisterType((*RowRecord)(nil), "milvus.grpc.RowRecord")
	proto.RegisterType((*InsertParam)(nil), "milvus.grpc.InsertParam")
	proto.RegisterType((*VectorIds)(nil), "milvus.grpc.VectorIds")
	proto.RegisterType((*SearchParam)(nil), "milvus.grpc.SearchParam")
	proto.RegisterType((*SearchInFilesParam)(nil), "milvus.grpc.SearchInFilesParam")
	proto.RegisterType((*SearchByIDParam)(nil), "milvus.grpc.SearchByIDParam")
	proto.RegisterType((*PreloadCollectionParam)(nil), "milvus.grpc.PreloadCollectionParam")
	proto.RegisterType((*ReLoadSegmentsParam)(nil), "milvus.grpc.ReLoadSegmentsParam")
	proto.RegisterType((*TopKQueryResult)(nil), "milvus.grpc.TopKQueryResult")
	proto.RegisterType((*StringReply)(nil), "milvus.grpc.StringReply")
	proto.RegisterType((*BoolReply)(nil), "milvus.grpc.BoolReply")
	proto.RegisterType((*CollectionRowCount)(nil), "milvus.grpc.CollectionRowCount")
	proto.RegisterType((*Command)(nil), "milvus.grpc.Command")
	proto.RegisterType((*IndexParam)(nil), "milvus.grpc.IndexParam")
	proto.RegisterType((*FlushParam)(nil), "milvus.grpc.FlushParam")
	proto.RegisterType((*DeleteByIDParam)(nil), "milvus.grpc.DeleteByIDParam")
	proto.RegisterType((*CollectionInfo)(nil), "milvus.grpc.CollectionInfo")
	proto.RegisterType((*VectorsIdentity)(nil), "milvus.grpc.VectorsIdentity")
	proto.RegisterType((*VectorsData)(nil), "milvus.grpc.VectorsData")
	proto.RegisterType((*GetVectorIDsParam)(nil), "milvus.grpc.GetVectorIDsParam")
	proto.RegisterType((*VectorFieldParam)(nil), "milvus.grpc.VectorFieldParam")
	proto.RegisterType((*FieldType)(nil), "milvus.grpc.FieldType")
	proto.RegisterType((*FieldParam)(nil), "milvus.grpc.FieldParam")
	proto.RegisterType((*VectorFieldValue)(nil), "milvus.grpc.VectorFieldValue")
	proto.RegisterType((*FieldValue)(nil), "milvus.grpc.FieldValue")
	proto.RegisterType((*Mapping)(nil), "milvus.grpc.Mapping")
	proto.RegisterType((*MappingList)(nil), "milvus.grpc.MappingList")
	proto.RegisterType((*TermQuery)(nil), "milvus.grpc.TermQuery")
	proto.RegisterType((*CompareExpr)(nil), "milvus.grpc.CompareExpr")
	proto.RegisterType((*RangeQuery)(nil), "milvus.grpc.RangeQuery")
	proto.RegisterType((*VectorQuery)(nil), "milvus.grpc.VectorQuery")
	proto.RegisterType((*BooleanQuery)(nil), "milvus.grpc.BooleanQuery")
	proto.RegisterType((*GeneralQuery)(nil), "milvus.grpc.GeneralQuery")
	proto.RegisterType((*HSearchParam)(nil), "milvus.grpc.HSearchParam")
	proto.RegisterType((*HSearchInSegmentsParam)(nil), "milvus.grpc.HSearchInSegmentsParam")
	proto.RegisterType((*AttrRecord)(nil), "milvus.grpc.AttrRecord")
	proto.RegisterType((*HEntity)(nil), "milvus.grpc.HEntity")
	proto.RegisterType((*HQueryResult)(nil), "milvus.grpc.HQueryResult")
	proto.RegisterType((*HInsertParam)(nil), "milvus.grpc.HInsertParam")
	proto.RegisterType((*HEntityIdentity)(nil), "milvus.grpc.HEntityIdentity")
	proto.RegisterType((*HEntityIDs)(nil), "milvus.grpc.HEntityIDs")
	proto.RegisterType((*HGetEntityIDsParam)(nil), "milvus.grpc.HGetEntityIDsParam")
	proto.RegisterType((*HDeleteByIDParam)(nil), "milvus.grpc.HDeleteByIDParam")
	proto.RegisterType((*HIndexParam)(nil), "milvus.grpc.HIndexParam")
}

func init() { proto.RegisterFile("milvus.proto", fileDescriptor_02345ba45cc0e303) }

var fileDescriptor_02345ba45cc0e303 = []byte{
	// 2661 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x5a, 0xcd, 0x6f, 0xdb, 0xc8,
	0x15, 0x17, 0x45, 0x7d, 0x58, 0x8f, 0x94, 0xc5, 0x9d, 0x38, 0x8e, 0xd6, 0xbb, 0xd9, 0x78, 0x19,
	0x20, 0xf5, 0xa6, 0x45, 0x9a, 0x3a, 0x41, 0x92, 0x6d, 0xb3, 0x6d, 0x62, 0xcb, 0xb1, 0x14, 0x2b,
	0xb2, 0x43, 0xcb, 0x0e, 0x50, 0x60, 0xa1, 0xa5, 0xc5, 0x89, 0xc3, 0xae, 0x44, 0x6a, 0x49, 0xca,
	0x89, 0xf7, 0xd4, 0x53, 0x7b, 0xda, 0xf6, 0xde, 0x7f, 0xa0, 0xa7, 0x9e, 0x8a, 0x02, 0xbd, 0xb5,
	0xff, 0x42, 0x4f, 0xfd, 0x0b, 0x7a, 0xed, 0xa9, 0xd7, 0x16, 0xc5, 0x7c, 0xf0, 0x53, 0xa4, 0x6d,
	0xda, 0x71, 0x81, 0x9e, 0xc4, 0x19, 0xbe, 0x79, 0x7c, 0x5f, 0xf3, 0x9b, 0xf7, 0xde, 0x08, 0xe4,
	0xb1, 0x39, 0x3a, 0x9a, 0xba, 0x77, 0x26, 0x8e, 0xed, 0xd9, 0x48, 0xe2, 0xa3, 0x43, 0x67, 0x32,
	0x5c, 0x92, 0x5d, 0x4f, 0xf7, 0xfc, 0x57, 0xea, 0x03, 0x90, 0xb7, 0xf0, 0xf1, 0xbe, 0x3e, 0x9a,
	0xe2, 0x1d, 0xdd, 0x74, 0x90, 0x02, 0xe2, 0xd7, 0xf8, 0xb8, 0x29, 0x2c, 0x0b, 0x2b, 0x35, 0x8d,
	0x3c, 0xa2, 0x05, 0x28, 0x1f, 0x91, 0xd7, 0xcd, 0x22, 0x9d, 0x63, 0x03, 0xf5, 0x73, 0x98, 0x5f,
	0xb7, 0x47, 0x23, 0x3c, 0xf4, 0x4c, 0xdb, 0xea, 0xe9, 0x63, 0x8c, 0xbe, 0x07, 0x8d, 0x61, 0x30,
	0x33, 0xb0, 0xf4, 0x31, 0xe6, 0x5c, 0xe6, 0x87, 0x31, 0x42, 0x75, 0x04, 0x28, 0xbe, 0xb4, 0x6b,
	0xba, 0x1e, 0xfa, 0x3e, 0x54, 0x98, 0x60, 0x74, 0x95, 0xb4, 0x7a, 0xe5, 0x4e, 0x44, 0xe8, 0x3b,
	0xbb, 0xf4, 0x95, 0xc6, 0x49, 0xd0, 0x67, 0xa0, 0x24, 0xbe, 0xe5, 0x36, 0x8b, 0xcb, 0xe2, 0x4a,
	0x4d, 0x6b, 0xc4, 0x3f, 0xe6, 0xaa, 0xdf, 0x15, 0x41, 0x09, 0x3f, 0xb7, 0x3b, 0x7c, 0x83, 0xc7,
	0x7a, 0xbe, 0x8f, 0xa5, 0x28, 0x56, 0x4c, 0x53, 0x0c, 0x7d, 0x0c, 0x35, 0xc3, 0x1c, 0x63, 0xcb,
	0x35, 0x6d, 0xab, 0x29, 0x2e, 0x0b, 0x2b, 0xa2, 0x16, 0x4e, 0xa0, 0x5b, 0xd0, 0x30, 0x2d, 0x03,
	0xbf, 0x1b, 0xbc, 0x36, 0x47, 0x78, 0xe0, 0x9a, 0xdf, 0xe2, 0x66, 0x89, 0xd2, 0xd4, 0xe9, 0xf4,
	0x33, 0x73, 0x84, 0x77, 0xcd, 0x6f, 0x31, 0xba, 0x01, 0xd2, 0x18, 0x7b, 0x8e, 0x39, 0x1c, 0x78,
	0xc7, 0x13, 0xdc, 0x2c, 0x2f, 0x0b, 0x2b, 0x65, 0x0d, 0xd8, 0x54, 0xff, 0x78, 0x82, 0xd1, 0x63,
	0x90, 0xf1, 0x3b, 0xcf, 0xd1, 0x07, 0x13, 0xdd, 0xd1, 0xc7, 0x6e, 0xb3, 0xb2, 0x2c, 0xae, 0x48,
	0xab, 0x1f, 0xc6, 0x54, 0x88, 0xfa, 0x54, 0x93, 0x28, 0xf9, 0x0e, 0xa5, 0x56, 0xb7, 0x60, 0x7e,
	0x47, 0x77, 0x3c, 0x93, 0x48, 0x4d, 0xa7, 0xce, 0xec, 0x38, 0x12, 0x1b, 0x9e, 0x7e, 0xc8, 0x95,
	0x27, 0x8f, 0xea, 0x08, 0xea, 0x01, 0xb3, 0xfc, 0x5e, 0xbc, 0x03, 0x57, 0x26, 0xfe, 0xea, 0x81,
	0xa7, 0x1f, 0x0e, 0x74, 0xc7, 0xd1, 0x8f, 0xb9, 0x23, 0x3f, 0x08, 0x5e, 0xf5, 0xf5, 0xc3, 0xa7,
	0xe4, 0x85, 0xba, 0x05, 0x35, 0xcd, 0x7e, 0xab, 0xe1, 0xa1, 0xed, 0x18, 0xe8, 0x3a, 0xc0, 0xeb,
	0x91, 0xad, 0x7b, 0x03, 0x43, 0xf7, 0xf4, 0xa6, 0xb0, 0x2c, 0xae, 0x14, 0xb5, 0x1a, 0x9d, 0x69,
	0xe9, 0x9e, 0x4e, 0xac, 0x78, 0x60, 0x5a, 0xba, 0x73, 0xcc, 0xde, 0x13, 0x99, 0x65, 0x0d, 0xd8,
	0x14, 0x21, 0x50, 0xff, 0x2d, 0x80, 0xd4, 0xb1, 0x5c, 0xec, 0x78, 0x39, 0xad, 0xf0, 0x04, 0x14,
	0xc7, 0x7e, 0x3b, 0x70, 0xa8, 0x18, 0x11, 0x91, 0xa5, 0xd5, 0xc5, 0x98, 0xb2, 0x81, 0xa8, 0xda,
	0xbc, 0xe3, 0x3f, 0x52, 0x3d, 0xd0, 0x32, 0xc8, 0x84, 0x83, 0xe9, 0xaf, 0x16, 0x97, 0xc5, 0x15,
	0x51, 0x03, 0xc7, 0x7e, 0xdb, 0xe1, 0x14, 0x37, 0xa1, 0x1e, 0xb3, 0x0c, 0x8d, 0x94, 0x9a, 0x26,
	0x47, 0x6d, 0x32, 0x13, 0x07, 0xe5, 0x5c, 0x71, 0xf0, 0x15, 0xd4, 0xf6, 0xf1, 0xd0, 0xb3, 0x9d,
	0x8e, 0xe1, 0xe6, 0x73, 0xdb, 0x2d, 0x68, 0x1c, 0xd1, 0x95, 0xa1, 0x06, 0x45, 0xaa, 0x41, 0xfd,
	0x88, 0x33, 0x64, 0xee, 0xfa, 0x8f, 0x00, 0xd2, 0x2e, 0xd6, 0x9d, 0xe1, 0x9b, 0x9c, 0x16, 0xce,
	0x19, 0x17, 0xa8, 0x05, 0xe8, 0x9b, 0x29, 0x76, 0x8e, 0xe3, 0x3e, 0x11, 0x4f, 0xf4, 0x89, 0x42,
	0x57, 0x44, 0xbd, 0x82, 0xa0, 0xe4, 0xd9, 0x93, 0xaf, 0xf9, 0xa6, 0xa4, 0xcf, 0x17, 0x34, 0xf1,
	0x14, 0x10, 0xd3, 0xbf, 0x63, 0x91, 0xdd, 0xed, 0x32, 0x33, 0xa8, 0x50, 0xa7, 0x08, 0x10, 0x18,
	0x4f, 0xa0, 0x7a, 0x49, 0x64, 0xd2, 0xf7, 0xff, 0x4f, 0x40, 0x76, 0xe9, 0x4a, 0xf6, 0x61, 0x1a,
	0xbe, 0xd2, 0x6a, 0x33, 0xee, 0x95, 0xd0, 0xb4, 0x9a, 0xe4, 0x86, 0x03, 0xf5, 0xef, 0x02, 0x34,
	0xd8, 0xcb, 0xb5, 0xe3, 0x4e, 0xeb, 0x92, 0x6d, 0xff, 0x21, 0xcc, 0x25, 0xe2, 0xb8, 0x6a, 0x5e,
	0x9a, 0x41, 0xbf, 0x81, 0xc5, 0x1d, 0x07, 0x8f, 0x6c, 0xdd, 0x08, 0x11, 0xfd, 0x72, 0xf5, 0x53,
	0xdf, 0xc0, 0x15, 0x0d, 0x77, 0x6d, 0xdd, 0xd8, 0xc5, 0x87, 0x63, 0x6c, 0x79, 0x6e, 0xce, 0xef,
	0xad, 0x80, 0xe2, 0xb2, 0x95, 0xf1, 0xdd, 0x52, 0xd3, 0xe6, 0xf9, 0xbc, 0xbf, 0x5d, 0x7e, 0x2d,
	0x40, 0xa3, 0x6f, 0x4f, 0xb6, 0x5e, 0xb2, 0xc0, 0x74, 0xa7, 0xa3, 0x9c, 0x70, 0x7a, 0x0d, 0xaa,
	0x04, 0x56, 0xac, 0x29, 0x8b, 0x17, 0x51, 0xab, 0x38, 0xf6, 0xdb, 0xde, 0x74, 0x4c, 0x70, 0xdb,
	0x34, 0x5c, 0xee, 0x1e, 0xf2, 0xc8, 0x4e, 0x2a, 0xd7, 0xd3, 0xad, 0x21, 0x76, 0x9b, 0x25, 0x86,
	0x9d, 0xc1, 0x84, 0xfa, 0x25, 0x48, 0xbb, 0x9e, 0x63, 0x5a, 0x87, 0x1a, 0x9e, 0x8c, 0x8e, 0xf3,
	0x09, 0xf1, 0x29, 0xc8, 0x2e, 0x5d, 0x3b, 0x70, 0xc8, 0x62, 0x7e, 0x58, 0x48, 0x6e, 0xc8, 0x4f,
	0x7d, 0x05, 0xb5, 0x35, 0xdb, 0x1e, 0x9d, 0x83, 0xf9, 0x75, 0x80, 0x03, 0xdb, 0x1e, 0x45, 0x58,
	0xcf, 0x69, 0xb5, 0x03, 0x9f, 0x97, 0xea, 0x46, 0x13, 0x0b, 0xcd, 0x7e, 0xbb, 0x6e, 0x4f, 0xad,
	0x9c, 0x36, 0xbc, 0x0b, 0x0b, 0x11, 0xbf, 0x12, 0x73, 0x0e, 0x09, 0x13, 0x6e, 0x50, 0x34, 0x9c,
	0x61, 0xaf, 0x7e, 0x04, 0xd5, 0x75, 0x7b, 0x3c, 0xd6, 0x2d, 0x83, 0xd8, 0x79, 0x38, 0x36, 0xfc,
	0xdc, 0x69, 0x38, 0x36, 0xd4, 0xbf, 0x08, 0x00, 0x1d, 0x72, 0xba, 0xb3, 0xa8, 0xb9, 0x9c, 0xb4,
	0xe3, 0x3a, 0x00, 0x4b, 0x2c, 0x68, 0xbe, 0x20, 0xd2, 0x7c, 0xa1, 0x46, 0x67, 0x52, 0xd3, 0x85,
	0x52, 0xae, 0x2d, 0xf7, 0x04, 0xe0, 0xd9, 0x68, 0xea, 0x72, 0x08, 0x5f, 0x85, 0xab, 0x09, 0x99,
	0x62, 0x18, 0x76, 0x25, 0x2e, 0x19, 0x8b, 0xeb, 0x3d, 0x68, 0xb4, 0xf0, 0x08, 0x7b, 0xf8, 0x1c,
	0x68, 0x14, 0x45, 0x97, 0x62, 0x0c, 0x5d, 0xd4, 0x9f, 0x47, 0x13, 0xd0, 0x8e, 0xf5, 0xda, 0xce,
	0x67, 0xdd, 0x8f, 0xa0, 0xf6, 0x0b, 0xd7, 0xb6, 0x06, 0xa6, 0xf5, 0xda, 0xe6, 0x76, 0x9d, 0x23,
	0x13, 0x84, 0x13, 0x11, 0x99, 0x9d, 0x8d, 0x6e, 0xc7, 0xc0, 0x96, 0x67, 0x7a, 0xc7, 0xef, 0x45,
	0xe4, 0x29, 0x48, 0x9c, 0x2d, 0x4d, 0x51, 0x72, 0xc9, 0xfb, 0x39, 0xc8, 0xec, 0x74, 0x75, 0xfd,
	0x84, 0xe6, 0xa4, 0xd3, 0x4d, 0x3a, 0x0a, 0xbf, 0xa3, 0x0e, 0xe0, 0x83, 0x4d, 0xec, 0xf1, 0xc3,
	0xbe, 0x95, 0x17, 0xc0, 0xc8, 0x86, 0xe6, 0x00, 0x16, 0x89, 0x41, 0x89, 0xcf, 0xd1, 0x84, 0xfe,
	0x2e, 0x28, 0x8c, 0xfb, 0x33, 0x13, 0x8f, 0x0c, 0xc6, 0x3f, 0x96, 0x0b, 0x0b, 0x89, 0x5c, 0x58,
	0xfd, 0x8d, 0x00, 0x35, 0x4a, 0x4c, 0x23, 0xf4, 0x3e, 0xd4, 0x88, 0x4e, 0x2c, 0x7e, 0x09, 0xed,
	0xfc, 0xea, 0xd5, 0x98, 0x62, 0x44, 0x0d, 0x42, 0xd9, 0x2e, 0x68, 0x73, 0x06, 0x7f, 0x46, 0x6b,
	0xbe, 0x45, 0x62, 0x67, 0xe4, 0xf5, 0xd8, 0xc2, 0xa4, 0x58, 0xed, 0x82, 0x6f, 0x1a, 0x3a, 0x5c,
	0xab, 0xf2, 0xda, 0x46, 0xfd, 0x9d, 0x00, 0x10, 0x91, 0x7e, 0x1e, 0x8a, 0x26, 0xdb, 0xc8, 0x25,
	0xad, 0x68, 0x1a, 0xe4, 0x28, 0x8b, 0x28, 0x4f, 0x9f, 0xd1, 0x6d, 0x28, 0x05, 0x1b, 0x2e, 0xe9,
	0x89, 0x40, 0x37, 0x8d, 0xd2, 0x5c, 0x78, 0x0f, 0x46, 0xed, 0x4b, 0x89, 0xd0, 0x0f, 0xfc, 0xaa,
	0x4c, 0x38, 0x31, 0x10, 0xb8, 0x7a, 0x7f, 0x28, 0x72, 0xf5, 0xd8, 0xe2, 0x4f, 0x41, 0x32, 0x2d,
	0xef, 0xde, 0xea, 0xc0, 0x67, 0x21, 0xac, 0x94, 0xdb, 0x05, 0x0d, 0xe8, 0x64, 0x94, 0xe4, 0xc1,
	0xfd, 0x41, 0x58, 0xfb, 0x89, 0x9c, 0xe4, 0xc1, 0xfd, 0x80, 0x84, 0x65, 0xe0, 0x8c, 0x84, 0xd8,
	0xa1, 0x48, 0x48, 0xe8, 0x24, 0x23, 0xb9, 0x09, 0xb2, 0x61, 0x4f, 0x0f, 0x46, 0x98, 0xd3, 0x90,
	0x54, 0x40, 0x20, 0x4e, 0x60, 0xb3, 0x01, 0x11, 0x3f, 0x32, 0x18, 0x11, 0xa9, 0x78, 0x6a, 0x84,
	0x88, 0xcd, 0x32, 0xa2, 0x1b, 0x1c, 0xfa, 0x19, 0x49, 0x85, 0x40, 0x7f, 0xbb, 0xc0, 0xc0, 0x9f,
	0x11, 0x84, 0xe1, 0xc0, 0x48, 0xaa, 0x27, 0x87, 0x03, 0x5d, 0x14, 0x86, 0x03, 0x1d, 0x86, 0xe1,
	0xf0, 0x27, 0x01, 0xaa, 0x2f, 0xf4, 0xc9, 0xc4, 0xb4, 0x0e, 0xf3, 0x6d, 0xd3, 0x9b, 0x50, 0x8f,
	0x6c, 0x2b, 0xd3, 0xa0, 0x86, 0x2b, 0x69, 0x72, 0x38, 0xd9, 0x31, 0xd2, 0xf6, 0x9e, 0x98, 0xba,
	0xf7, 0x7e, 0x08, 0x95, 0xd7, 0x44, 0x58, 0x3f, 0x60, 0xae, 0xcd, 0x06, 0x19, 0xcb, 0xff, 0x38,
	0x99, 0xea, 0x82, 0xc4, 0xc5, 0xce, 0x5f, 0x8d, 0x3d, 0x04, 0x79, 0xcc, 0xd6, 0x0e, 0x46, 0xa6,
	0xeb, 0x71, 0x84, 0x59, 0x88, 0x2d, 0xe1, 0xcc, 0x35, 0x69, 0x1c, 0x7e, 0x45, 0xfd, 0xa3, 0x00,
	0xb5, 0x3e, 0x76, 0xc6, 0x34, 0x71, 0xa1, 0x75, 0x19, 0x11, 0x26, 0x8a, 0x29, 0x35, 0x3a, 0x43,
	0x55, 0x5a, 0x84, 0x0a, 0x35, 0xb1, 0xcb, 0x4b, 0x32, 0x3e, 0x22, 0x78, 0x4c, 0x9f, 0x68, 0xfa,
	0xc2, 0x6a, 0xe7, 0x39, 0x3a, 0x41, 0x12, 0x98, 0x05, 0x28, 0x1f, 0xd8, 0xb6, 0xeb, 0xd1, 0xf8,
	0x29, 0x6a, 0x6c, 0x70, 0xc1, 0x5c, 0x52, 0x07, 0x69, 0xdd, 0x1e, 0x4f, 0x74, 0x07, 0x6f, 0xbc,
	0x9b, 0x38, 0xe8, 0x11, 0xcc, 0xd9, 0x13, 0xec, 0xe8, 0x9e, 0xed, 0x70, 0x08, 0xfa, 0x38, 0xc6,
	0x88, 0xd3, 0x6e, 0x73, 0x1a, 0x2d, 0xa0, 0x46, 0x4d, 0xa8, 0xd2, 0x67, 0xcb, 0xe0, 0xf0, 0xe0,
	0x0f, 0x89, 0x61, 0x40, 0xd3, 0xad, 0x43, 0x7c, 0x26, 0xcb, 0xac, 0x46, 0xf9, 0x88, 0x33, 0xe9,
	0x7e, 0x44, 0xd8, 0xe0, 0x0b, 0xa1, 0x61, 0xc4, 0x93, 0x0c, 0x93, 0x0f, 0x6d, 0xfe, 0x26, 0xf8,
	0xc7, 0xd4, 0x99, 0xc4, 0xbe, 0x01, 0x12, 0x2b, 0xbe, 0x98, 0x20, 0x45, 0x2a, 0x08, 0xd0, 0xa9,
	0x35, 0x2a, 0xcd, 0x5d, 0xa8, 0xb2, 0xba, 0xcc, 0x3d, 0xa5, 0x24, 0xf3, 0xc9, 0x2e, 0xa1, 0x70,
	0x78, 0x07, 0x32, 0x49, 0x39, 0xb1, 0x6e, 0x31, 0x9d, 0x56, 0xa0, 0x6c, 0x0f, 0x87, 0x53, 0xdf,
	0xd5, 0x28, 0xc6, 0x66, 0x9b, 0xbc, 0xd1, 0x18, 0x01, 0xfa, 0x29, 0xd4, 0x0f, 0xb1, 0x85, 0x1d,
	0x7d, 0x34, 0xa0, 0x3a, 0x71, 0xdf, 0xc4, 0x3f, 0xbc, 0xc9, 0x28, 0x58, 0xe6, 0x2e, 0x1f, 0x46,
	0x46, 0xea, 0x77, 0x45, 0x90, 0xa3, 0xaf, 0xd1, 0x13, 0xa8, 0x1f, 0x30, 0x51, 0x38, 0x43, 0xb6,
	0x35, 0xe3, 0x0c, 0xa3, 0xc2, 0xb6, 0x0b, 0x9a, 0x7c, 0x10, 0x15, 0xfe, 0x21, 0x80, 0x87, 0x9d,
	0x71, 0x20, 0xcf, 0xec, 0xf1, 0x13, 0xec, 0x46, 0x02, 0x91, 0x5e, 0xb0, 0x35, 0x7f, 0x0c, 0x92,
	0x43, 0xc2, 0x91, 0xaf, 0x64, 0x07, 0x57, 0x1c, 0x53, 0xc2, 0x70, 0x25, 0x48, 0xee, 0x84, 0xc1,
	0xfb, 0x45, 0x00, 0xaf, 0x6c, 0x71, 0x29, 0xa5, 0x22, 0x8d, 0x44, 0x4d, 0x88, 0xac, 0x74, 0x48,
	0x90, 0x95, 0xae, 0x53, 0xff, 0x21, 0x80, 0xdc, 0xfe, 0x9f, 0x74, 0x05, 0x66, 0x3c, 0x27, 0xa6,
	0x18, 0x3a, 0xdb, 0x73, 0x17, 0xdc, 0x45, 0xbf, 0x14, 0x60, 0xb1, 0xed, 0x57, 0xff, 0xf1, 0xda,
	0x31, 0xad, 0x24, 0x14, 0xd2, 0x4a, 0x42, 0x22, 0x42, 0x4a, 0x1b, 0x20, 0x2e, 0x42, 0x3b, 0xb3,
	0x0f, 0xa0, 0x02, 0x3c, 0xf5, 0x3c, 0x87, 0xf7, 0xcb, 0x16, 0xa2, 0x09, 0x43, 0xd0, 0xc6, 0xfd,
	0xa7, 0x00, 0xd5, 0xf6, 0x06, 0x4b, 0x71, 0xf3, 0xe6, 0xcf, 0x2c, 0x33, 0xf6, 0x0f, 0x39, 0x51,
	0x9b, 0x63, 0x13, 0x1d, 0x83, 0x60, 0x42, 0x08, 0x19, 0x6c, 0xdb, 0xd7, 0x34, 0x08, 0x30, 0x83,
	0x56, 0x89, 0xba, 0xe7, 0x39, 0x03, 0x1f, 0x18, 0x4a, 0xf4, 0x2c, 0x90, 0xf4, 0x40, 0xdc, 0x58,
	0x35, 0x5b, 0x8e, 0x55, 0xb3, 0x8f, 0xa1, 0xee, 0xd0, 0xea, 0x78, 0xc0, 0x0f, 0x92, 0x4a, 0xd6,
	0xd9, 0x48, 0x5d, 0xa3, 0xc9, 0x8c, 0x9a, 0x0e, 0x5c, 0xf5, 0xcf, 0x24, 0xfe, 0xce, 0x5d, 0x62,
	0xdf, 0x05, 0xa6, 0xa4, 0xc9, 0xfb, 0xcd, 0xc9, 0xf3, 0x91, 0x9b, 0x52, 0x0b, 0xa8, 0xa2, 0x6a,
	0x88, 0x31, 0x35, 0x16, 0xa0, 0xec, 0x0e, 0x6d, 0x07, 0xf3, 0xf2, 0x9b, 0x0d, 0xd0, 0x12, 0xcc,
	0xf9, 0x75, 0x38, 0x85, 0xb8, 0xa2, 0x16, 0x8c, 0xd5, 0x7f, 0x11, 0xd1, 0xcf, 0xd5, 0xb2, 0x9c,
	0x69, 0x27, 0x16, 0x53, 0xda, 0x89, 0x51, 0xdd, 0xd8, 0x56, 0x39, 0x4d, 0xb7, 0x5b, 0xd0, 0x08,
	0x62, 0x80, 0xc7, 0x71, 0x89, 0x35, 0x02, 0xfd, 0x48, 0x08, 0xc2, 0xf8, 0x02, 0xd8, 0xfd, 0x1c,
	0x1a, 0xfc, 0xd3, 0xf9, 0x8b, 0x31, 0x96, 0xc7, 0xb3, 0xf0, 0x2c, 0x9a, 0x86, 0xaa, 0x03, 0xf8,
	0xbc, 0x5a, 0xf9, 0xbb, 0x9e, 0x49, 0x65, 0x8b, 0x29, 0xca, 0xaa, 0x5f, 0x01, 0x6a, 0x6f, 0x62,
	0x2f, 0xf8, 0xca, 0xfb, 0x2f, 0xb7, 0xf6, 0x41, 0x69, 0x5f, 0x46, 0x45, 0xfd, 0x57, 0x01, 0xa4,
	0xf6, 0xff, 0x75, 0xb7, 0xe2, 0xf6, 0xaf, 0x04, 0x98, 0xf3, 0x8b, 0x45, 0x34, 0x07, 0xa5, 0xde,
	0x5e, 0xb7, 0xab, 0x14, 0xc8, 0x53, 0xa7, 0xd7, 0x7f, 0xa4, 0x08, 0xa8, 0x06, 0xe5, 0x4e, 0xaf,
	0xff, 0xa3, 0x07, 0x4a, 0x91, 0x3f, 0xde, 0x5b, 0x55, 0x44, 0xfe, 0xf8, 0xe0, 0xbe, 0x52, 0x42,
	0x00, 0x95, 0xdd, 0xbe, 0xd6, 0xe9, 0x6d, 0x2a, 0x0b, 0x64, 0xd9, 0xda, 0xf6, 0x76, 0x57, 0xf9,
	0x84, 0x10, 0x3c, 0xeb, 0x6e, 0x3f, 0xed, 0x2b, 0x2b, 0x84, 0xa0, 0xb5, 0xbd, 0xb7, 0xd6, 0xdd,
	0x50, 0x3e, 0x23, 0xcf, 0xfb, 0x1b, 0xeb, 0xfd, 0x6d, 0x4d, 0x31, 0x90, 0x0c, 0xd5, 0xbd, 0xde,
	0x56, 0x6f, 0xfb, 0x55, 0x4f, 0xf9, 0x6d, 0xef, 0xf6, 0x3a, 0x34, 0x12, 0x19, 0x23, 0xaa, 0x40,
	0xb1, 0xdb, 0x57, 0x0a, 0xa8, 0x0a, 0x62, 0xb7, 0xbf, 0xa1, 0x08, 0x64, 0x62, 0xe3, 0xa5, 0x52,
	0x24, 0xbf, 0x9b, 0x7d, 0x45, 0x24, 0x2f, 0x36, 0xfb, 0x1b, 0x4a, 0x89, 0x4c, 0xf4, 0x36, 0x94,
	0xf2, 0xed, 0x47, 0x50, 0xa6, 0xb9, 0x08, 0x92, 0xa0, 0xda, 0xe9, 0xed, 0x3f, 0xed, 0x76, 0x5a,
	0x4c, 0x99, 0x17, 0x7b, 0xbb, 0x7d, 0x45, 0xa0, 0xb2, 0xb6, 0xb7, 0xf7, 0xba, 0x2d, 0xa5, 0x88,
	0x64, 0x98, 0x23, 0xb3, 0x83, 0xde, 0x76, 0x5f, 0x11, 0x57, 0x7f, 0x7f, 0x0d, 0xea, 0x2f, 0xa8,
	0xc5, 0x76, 0xb1, 0x73, 0x64, 0x0e, 0x31, 0x6a, 0x83, 0xb2, 0xee, 0x60, 0xdd, 0xc3, 0x61, 0xd3,
	0x04, 0x5d, 0x4f, 0x24, 0x98, 0xf1, 0x4b, 0xb2, 0xa5, 0x34, 0x7f, 0xab, 0x05, 0xf4, 0x0c, 0xea,
	0x6d, 0xdd, 0x8d, 0xb0, 0xf9, 0x28, 0x83, 0x0d, 0x71, 0xf7, 0xd2, 0xe2, 0x4c, 0x5e, 0xc3, 0x7a,
	0x75, 0x05, 0xa4, 0x01, 0x6a, 0x61, 0x77, 0xe8, 0x98, 0x07, 0xf8, 0xac, 0xcc, 0x4e, 0x16, 0x58,
	0x2d, 0xa0, 0x97, 0xc4, 0xec, 0x53, 0xcb, 0x3b, 0x2b, 0xc3, 0x1b, 0x19, 0x2f, 0x83, 0xee, 0x5e,
	0x01, 0x3d, 0x87, 0xc6, 0xee, 0x1b, 0x32, 0xf4, 0xdf, 0xb9, 0x68, 0x21, 0x99, 0x98, 0x8f, 0x75,
	0xcb, 0xc8, 0xe4, 0xe5, 0xdf, 0x70, 0xaa, 0x05, 0xb4, 0x03, 0x28, 0xce, 0x8b, 0xf6, 0xad, 0x4e,
	0x94, 0x30, 0xeb, 0x25, 0xed, 0x53, 0x15, 0x50, 0x0b, 0xe6, 0x5b, 0x8e, 0x3d, 0x39, 0xab, 0xbe,
	0x19, 0x2e, 0xfd, 0x02, 0x24, 0x16, 0x1c, 0x74, 0xf7, 0xa3, 0xf8, 0x51, 0x1a, 0x22, 0x42, 0xd6,
	0xf2, 0x4d, 0xa8, 0xfb, 0x9e, 0x64, 0x0c, 0x4e, 0x94, 0x21, 0x8b, 0xbb, 0x5a, 0x40, 0x3f, 0x83,
	0x1a, 0xd1, 0xe6, 0x0c, 0x4c, 0x32, 0x24, 0xd9, 0x80, 0x06, 0x53, 0x24, 0xb8, 0x95, 0x4c, 0xb0,
	0x89, 0x5f, 0x7d, 0x66, 0xb3, 0x91, 0xdb, 0xba, 0x7b, 0x46, 0x1e, 0xd9, 0x11, 0xbe, 0x05, 0xf3,
	0xc4, 0xdd, 0x01, 0xbd, 0x7b, 0xb2, 0x4e, 0x4b, 0xe9, 0x5f, 0xe1, 0xb1, 0xb3, 0x0e, 0x75, 0x62,
	0x9b, 0x8b, 0x29, 0xf6, 0x18, 0x2a, 0x2c, 0x81, 0x40, 0xcd, 0x84, 0x17, 0x82, 0xac, 0x22, 0xa1,
	0x4f, 0x70, 0x47, 0x48, 0xb7, 0xc2, 0x7c, 0xd0, 0x48, 0x74, 0xc9, 0xd9, 0x83, 0x3e, 0x4e, 0xa1,
	0x0d, 0x7a, 0xa6, 0x4b, 0x69, 0xd5, 0x01, 0x6b, 0x49, 0x16, 0x50, 0x9b, 0x94, 0x45, 0x61, 0x53,
	0x12, 0x7d, 0x92, 0x48, 0xcb, 0x13, 0xfd, 0xca, 0x13, 0xa4, 0x5a, 0x83, 0x0a, 0x4b, 0x81, 0x51,
	0xe6, 0xfd, 0xd8, 0x52, 0x5c, 0xce, 0xc4, 0x2d, 0x0b, 0xd5, 0x0c, 0xc2, 0x1b, 0xb3, 0x84, 0x56,
	0x89, 0xab, 0xb4, 0x53, 0x79, 0xed, 0x40, 0x3d, 0x76, 0xeb, 0x87, 0x6e, 0xa4, 0xb0, 0x8b, 0xde,
	0x08, 0x9e, 0xca, 0xf1, 0x21, 0x88, 0xeb, 0x63, 0x23, 0x03, 0x76, 0x12, 0x4a, 0x47, 0xee, 0x59,
	0x0a, 0xe8, 0x29, 0x40, 0x98, 0x28, 0x24, 0xd4, 0x4a, 0x64, 0x10, 0x59, 0x11, 0xb3, 0x0d, 0x1f,
	0xcc, 0x5c, 0xb9, 0xa1, 0x9b, 0xf1, 0xd0, 0x4b, 0xbd, 0x92, 0xcb, 0x62, 0xd8, 0x81, 0x79, 0x8d,
	0xd2, 0xfb, 0x45, 0x11, 0x5a, 0x8e, 0x57, 0xa0, 0xb3, 0xb7, 0x6d, 0x59, 0xac, 0x1e, 0x42, 0x99,
	0xde, 0x4d, 0x24, 0x00, 0x2b, 0xbc, 0xaf, 0xc8, 0xc6, 0xbb, 0x2a, 0x3d, 0x9d, 0x87, 0xde, 0x39,
	0x51, 0x66, 0x91, 0xa1, 0x4c, 0xfb, 0xf8, 0xc0, 0x31, 0xa3, 0x86, 0x49, 0xed, 0x96, 0x65, 0xb1,
	0xe9, 0xc2, 0x95, 0xb6, 0xee, 0xce, 0xf0, 0x38, 0xe7, 0x71, 0xfa, 0x1c, 0x16, 0x08, 0x3e, 0xe4,
	0x63, 0x97, 0xe9, 0xf4, 0xa6, 0x0f, 0xe8, 0xf9, 0xf8, 0xa5, 0xea, 0xaf, 0x16, 0xd0, 0x2b, 0xb8,
	0x4a, 0xcf, 0xd3, 0x7c, 0xdc, 0xce, 0x70, 0x3a, 0x77, 0xe0, 0x2a, 0x81, 0xd8, 0x24, 0x5f, 0xf7,
	0x4c, 0x9b, 0x25, 0xd2, 0x2a, 0x55, 0x0b, 0x68, 0x1f, 0x9a, 0x69, 0xac, 0x2e, 0x7c, 0x44, 0xbf,
	0x80, 0x6b, 0x7c, 0x87, 0xbc, 0x17, 0xdf, 0xb4, 0x40, 0x66, 0x68, 0xcd, 0xab, 0xf6, 0x44, 0x37,
	0x20, 0x8a, 0xe4, 0xd7, 0xd2, 0xea, 0xb7, 0x4e, 0x8b, 0xed, 0x42, 0x99, 0x49, 0xc3, 0xa1, 0x33,
	0xbb, 0xa7, 0x70, 0x2a, 0x3a, 0x7d, 0x09, 0x8b, 0x51, 0x56, 0x61, 0xb7, 0x23, 0x01, 0x13, 0xe9,
	0xdd, 0x90, 0x53, 0xd9, 0x6f, 0x40, 0x3d, 0x28, 0xa7, 0x52, 0x60, 0x2c, 0x51, 0x1a, 0x2e, 0xa5,
	0xd6, 0xac, 0x74, 0x7b, 0xc8, 0xd1, 0xaa, 0x2c, 0x01, 0xca, 0xb3, 0x15, 0xdb, 0x49, 0xc6, 0x7b,
	0x4e, 0x32, 0x57, 0x82, 0x9e, 0x1b, 0xbc, 0x12, 0xa6, 0x72, 0xc5, 0x93, 0xd3, 0xf6, 0xd9, 0xf0,
	0xf5, 0xa0, 0x42, 0xff, 0x86, 0x77, 0xef, 0xbf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x14, 0x6c, 0x3f,
	0x4d, 0xb1, 0x27, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MilvusServiceClient is the client API for MilvusService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MilvusServiceClient interface {
	//*
	// @brief This method is used to create collection
	//
	// @param CollectionSchema, use to provide collection information to be created.
	//
	// @return Status
	CreateCollection(ctx context.Context, in *CollectionSchema, opts ...grpc.CallOption) (*Status, error)
	//*
	// @brief This method is used to test collection existence.
	//
	// @param CollectionName, collection name is going to be tested.
	//
	// @return BoolReply
	HasCollection(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*BoolReply, error)
	//*
	// @brief This method is used to get collection schema.
	//
	// @param CollectionName, target collection name.
	//
	// @return CollectionSchema
	DescribeCollection(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*CollectionSchema, error)
	//*
	// @brief This method is used to get collection schema.
	//
	// @param CollectionName, target collection name.
	//
	// @return CollectionRowCount
	CountCollection(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*CollectionRowCount, error)
	//*
	// @brief This method is used to list all collections.
	//
	// @param Command, dummy parameter.
	//
	// @return CollectionNameList
	ShowCollections(ctx context.Context, in *Command, opts ...grpc.CallOption) (*CollectionNameList, error)
	//*
	// @brief This method is used to get collection detail information.
	//
	// @param CollectionName, target collection name.
	//
	// @return CollectionInfo
	ShowCollectionInfo(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*CollectionInfo, error)
	//*
	// @brief This method is used to delete collection.
	//
	// @param CollectionName, collection name is going to be deleted.
	//
	// @return CollectionNameList
	DropCollection(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*Status, error)
	//*
	// @brief This method is used to build index by collection in sync mode.
	//
	// @param IndexParam, index paramters.
	//
	// @return Status
	CreateIndex(ctx context.Context, in *IndexParam, opts ...grpc.CallOption) (*Status, error)
	//*
	// @brief This method is used to describe index
	//
	// @param CollectionName, target collection name.
	//
	// @return IndexParam
	DescribeIndex(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*IndexParam, error)
	//*
	// @brief This method is used to drop index
	//
	// @param CollectionName, target collection name.
	//
	// @return Status
	DropIndex(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*Status, error)
	//*
	// @brief This method is used to create partition
	//
	// @param PartitionParam, partition parameters.
	//
	// @return Status
	CreatePartition(ctx context.Context, in *PartitionParam, opts ...grpc.CallOption) (*Status, error)
	//*
	// @brief This method is used to test partition existence.
	//
	// @param PartitionParam, target partition.
	//
	// @return BoolReply
	HasPartition(ctx context.Context, in *PartitionParam, opts ...grpc.CallOption) (*BoolReply, error)
	//*
	// @brief This method is used to show partition information
	//
	// @param CollectionName, target collection name.
	//
	// @return PartitionList
	ShowPartitions(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*PartitionList, error)
	//*
	// @brief This method is used to drop partition
	//
	// @param PartitionParam, target partition.
	//
	// @return Status
	DropPartition(ctx context.Context, in *PartitionParam, opts ...grpc.CallOption) (*Status, error)
	//*
	// @brief This method is used to add vector array to collection.
	//
	// @param InsertParam, insert parameters.
	//
	// @return VectorIds
	Insert(ctx context.Context, in *InsertParam, opts ...grpc.CallOption) (*VectorIds, error)
	//*
	// @brief This method is used to get vectors data by id array.
	//
	// @param VectorsIdentity, target vector id array.
	//
	// @return VectorsData
	GetVectorsByID(ctx context.Context, in *VectorsIdentity, opts ...grpc.CallOption) (*VectorsData, error)
	//*
	// @brief This method is used to get vector ids from a segment
	//
	// @param GetVectorIDsParam, target collection and segment
	//
	// @return VectorIds
	GetVectorIDs(ctx context.Context, in *GetVectorIDsParam, opts ...grpc.CallOption) (*VectorIds, error)
	//*
	// @brief This method is used to query vector in collection.
	//
	// @param SearchParam, search parameters.
	//
	// @return TopKQueryResult
	Search(ctx context.Context, in *SearchParam, opts ...grpc.CallOption) (*TopKQueryResult, error)
	//*
	// @brief This method is used to query vector by id.
	//
	// @param SearchByIDParam, search parameters.
	//
	// @return TopKQueryResult
	SearchByID(ctx context.Context, in *SearchByIDParam, opts ...grpc.CallOption) (*TopKQueryResult, error)
	//*
	// @brief This method is used to query vector in specified files.
	//
	// @param SearchInFilesParam, search in files paremeters.
	//
	// @return TopKQueryResult
	SearchInFiles(ctx context.Context, in *SearchInFilesParam, opts ...grpc.CallOption) (*TopKQueryResult, error)
	//*
	// @brief This method is used to give the server status.
	//
	// @param Command, command string
	//
	// @return StringReply
	Cmd(ctx context.Context, in *Command, opts ...grpc.CallOption) (*StringReply, error)
	//*
	// @brief This method is used to delete vector by id
	//
	// @param DeleteByIDParam, delete parameters.
	//
	// @return status
	DeleteByID(ctx context.Context, in *DeleteByIDParam, opts ...grpc.CallOption) (*Status, error)
	//*
	// @brief This method is used to preload collection/partitions
	//
	// @param PreloadCollectionParam, target collection/partitions.
	//
	// @return Status
	PreloadCollection(ctx context.Context, in *PreloadCollectionParam, opts ...grpc.CallOption) (*Status, error)
	//*
	// @brief This method is used to reload collection segments
	//
	// @param ReLoadSegmentsParam, target segments information.
	//
	// @return Status
	ReloadSegments(ctx context.Context, in *ReLoadSegmentsParam, opts ...grpc.CallOption) (*Status, error)
	//*
	// @brief This method is used to flush buffer into storage.
	//
	// @param FlushParam, flush parameters
	//
	// @return Status
	Flush(ctx context.Context, in *FlushParam, opts ...grpc.CallOption) (*Status, error)
	//*
	// @brief This method is used to compact collection
	//
	// @param CollectionName, target collection name.
	//
	// @return Status
	Compact(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*Status, error)
	CreateHybridCollection(ctx context.Context, in *Mapping, opts ...grpc.CallOption) (*Status, error)
	HasHybridCollection(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*BoolReply, error)
	DropHybridCollection(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*Status, error)
	DescribeHybridCollection(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*Mapping, error)
	CountHybridCollection(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*CollectionRowCount, error)
	ShowHybridCollections(ctx context.Context, in *Command, opts ...grpc.CallOption) (*MappingList, error)
	ShowHybridCollectionInfo(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*CollectionInfo, error)
	PreloadHybridCollection(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*Status, error)
	InsertEntity(ctx context.Context, in *HInsertParam, opts ...grpc.CallOption) (*HEntityIDs, error)
	// TODO(yukun): will change to HQueryResult
	HybridSearch(ctx context.Context, in *HSearchParam, opts ...grpc.CallOption) (*TopKQueryResult, error)
	HybridSearchInSegments(ctx context.Context, in *HSearchInSegmentsParam, opts ...grpc.CallOption) (*TopKQueryResult, error)
	GetEntityByID(ctx context.Context, in *HEntityIdentity, opts ...grpc.CallOption) (*HEntity, error)
	GetEntityIDs(ctx context.Context, in *HGetEntityIDsParam, opts ...grpc.CallOption) (*HEntityIDs, error)
	DeleteEntitiesByID(ctx context.Context, in *HDeleteByIDParam, opts ...grpc.CallOption) (*Status, error)
}

type milvusServiceClient struct {
	cc *grpc.ClientConn
}

func NewMilvusServiceClient(cc *grpc.ClientConn) MilvusServiceClient {
	return &milvusServiceClient{cc}
}

func (c *milvusServiceClient) CreateCollection(ctx context.Context, in *CollectionSchema, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/CreateCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) HasCollection(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*BoolReply, error) {
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/HasCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) DescribeCollection(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*CollectionSchema, error) {
	out := new(CollectionSchema)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/DescribeCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) CountCollection(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*CollectionRowCount, error) {
	out := new(CollectionRowCount)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/CountCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) ShowCollections(ctx context.Context, in *Command, opts ...grpc.CallOption) (*CollectionNameList, error) {
	out := new(CollectionNameList)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/ShowCollections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) ShowCollectionInfo(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*CollectionInfo, error) {
	out := new(CollectionInfo)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/ShowCollectionInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) DropCollection(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/DropCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) CreateIndex(ctx context.Context, in *IndexParam, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/CreateIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) DescribeIndex(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*IndexParam, error) {
	out := new(IndexParam)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/DescribeIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) DropIndex(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/DropIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) CreatePartition(ctx context.Context, in *PartitionParam, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/CreatePartition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) HasPartition(ctx context.Context, in *PartitionParam, opts ...grpc.CallOption) (*BoolReply, error) {
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/HasPartition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) ShowPartitions(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*PartitionList, error) {
	out := new(PartitionList)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/ShowPartitions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) DropPartition(ctx context.Context, in *PartitionParam, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/DropPartition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) Insert(ctx context.Context, in *InsertParam, opts ...grpc.CallOption) (*VectorIds, error) {
	out := new(VectorIds)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/Insert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) GetVectorsByID(ctx context.Context, in *VectorsIdentity, opts ...grpc.CallOption) (*VectorsData, error) {
	out := new(VectorsData)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/GetVectorsByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) GetVectorIDs(ctx context.Context, in *GetVectorIDsParam, opts ...grpc.CallOption) (*VectorIds, error) {
	out := new(VectorIds)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/GetVectorIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) Search(ctx context.Context, in *SearchParam, opts ...grpc.CallOption) (*TopKQueryResult, error) {
	out := new(TopKQueryResult)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) SearchByID(ctx context.Context, in *SearchByIDParam, opts ...grpc.CallOption) (*TopKQueryResult, error) {
	out := new(TopKQueryResult)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/SearchByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) SearchInFiles(ctx context.Context, in *SearchInFilesParam, opts ...grpc.CallOption) (*TopKQueryResult, error) {
	out := new(TopKQueryResult)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/SearchInFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) Cmd(ctx context.Context, in *Command, opts ...grpc.CallOption) (*StringReply, error) {
	out := new(StringReply)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/Cmd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) DeleteByID(ctx context.Context, in *DeleteByIDParam, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/DeleteByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) PreloadCollection(ctx context.Context, in *PreloadCollectionParam, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/PreloadCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) ReloadSegments(ctx context.Context, in *ReLoadSegmentsParam, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/ReloadSegments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) Flush(ctx context.Context, in *FlushParam, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/Flush", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) Compact(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/Compact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) CreateHybridCollection(ctx context.Context, in *Mapping, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/CreateHybridCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) HasHybridCollection(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*BoolReply, error) {
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/HasHybridCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) DropHybridCollection(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/DropHybridCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) DescribeHybridCollection(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*Mapping, error) {
	out := new(Mapping)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/DescribeHybridCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) CountHybridCollection(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*CollectionRowCount, error) {
	out := new(CollectionRowCount)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/CountHybridCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) ShowHybridCollections(ctx context.Context, in *Command, opts ...grpc.CallOption) (*MappingList, error) {
	out := new(MappingList)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/ShowHybridCollections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) ShowHybridCollectionInfo(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*CollectionInfo, error) {
	out := new(CollectionInfo)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/ShowHybridCollectionInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) PreloadHybridCollection(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/PreloadHybridCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) InsertEntity(ctx context.Context, in *HInsertParam, opts ...grpc.CallOption) (*HEntityIDs, error) {
	out := new(HEntityIDs)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/InsertEntity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) HybridSearch(ctx context.Context, in *HSearchParam, opts ...grpc.CallOption) (*TopKQueryResult, error) {
	out := new(TopKQueryResult)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/HybridSearch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) HybridSearchInSegments(ctx context.Context, in *HSearchInSegmentsParam, opts ...grpc.CallOption) (*TopKQueryResult, error) {
	out := new(TopKQueryResult)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/HybridSearchInSegments", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) GetEntityByID(ctx context.Context, in *HEntityIdentity, opts ...grpc.CallOption) (*HEntity, error) {
	out := new(HEntity)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/GetEntityByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) GetEntityIDs(ctx context.Context, in *HGetEntityIDsParam, opts ...grpc.CallOption) (*HEntityIDs, error) {
	out := new(HEntityIDs)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/GetEntityIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) DeleteEntitiesByID(ctx context.Context, in *HDeleteByIDParam, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/DeleteEntitiesByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MilvusServiceServer is the server API for MilvusService service.
type MilvusServiceServer interface {
	//*
	// @brief This method is used to create collection
	//
	// @param CollectionSchema, use to provide collection information to be created.
	//
	// @return Status
	CreateCollection(context.Context, *CollectionSchema) (*Status, error)
	//*
	// @brief This method is used to test collection existence.
	//
	// @param CollectionName, collection name is going to be tested.
	//
	// @return BoolReply
	HasCollection(context.Context, *CollectionName) (*BoolReply, error)
	//*
	// @brief This method is used to get collection schema.
	//
	// @param CollectionName, target collection name.
	//
	// @return CollectionSchema
	DescribeCollection(context.Context, *CollectionName) (*CollectionSchema, error)
	//*
	// @brief This method is used to get collection schema.
	//
	// @param CollectionName, target collection name.
	//
	// @return CollectionRowCount
	CountCollection(context.Context, *CollectionName) (*CollectionRowCount, error)
	//*
	// @brief This method is used to list all collections.
	//
	// @param Command, dummy parameter.
	//
	// @return CollectionNameList
	ShowCollections(context.Context, *Command) (*CollectionNameList, error)
	//*
	// @brief This method is used to get collection detail information.
	//
	// @param CollectionName, target collection name.
	//
	// @return CollectionInfo
	ShowCollectionInfo(context.Context, *CollectionName) (*CollectionInfo, error)
	//*
	// @brief This method is used to delete collection.
	//
	// @param CollectionName, collection name is going to be deleted.
	//
	// @return CollectionNameList
	DropCollection(context.Context, *CollectionName) (*Status, error)
	//*
	// @brief This method is used to build index by collection in sync mode.
	//
	// @param IndexParam, index paramters.
	//
	// @return Status
	CreateIndex(context.Context, *IndexParam) (*Status, error)
	//*
	// @brief This method is used to describe index
	//
	// @param CollectionName, target collection name.
	//
	// @return IndexParam
	DescribeIndex(context.Context, *CollectionName) (*IndexParam, error)
	//*
	// @brief This method is used to drop index
	//
	// @param CollectionName, target collection name.
	//
	// @return Status
	DropIndex(context.Context, *CollectionName) (*Status, error)
	//*
	// @brief This method is used to create partition
	//
	// @param PartitionParam, partition parameters.
	//
	// @return Status
	CreatePartition(context.Context, *PartitionParam) (*Status, error)
	//*
	// @brief This method is used to test partition existence.
	//
	// @param PartitionParam, target partition.
	//
	// @return BoolReply
	HasPartition(context.Context, *PartitionParam) (*BoolReply, error)
	//*
	// @brief This method is used to show partition information
	//
	// @param CollectionName, target collection name.
	//
	// @return PartitionList
	ShowPartitions(context.Context, *CollectionName) (*PartitionList, error)
	//*
	// @brief This method is used to drop partition
	//
	// @param PartitionParam, target partition.
	//
	// @return Status
	DropPartition(context.Context, *PartitionParam) (*Status, error)
	//*
	// @brief This method is used to add vector array to collection.
	//
	// @param InsertParam, insert parameters.
	//
	// @return VectorIds
	Insert(context.Context, *InsertParam) (*VectorIds, error)
	//*
	// @brief This method is used to get vectors data by id array.
	//
	// @param VectorsIdentity, target vector id array.
	//
	// @return VectorsData
	GetVectorsByID(context.Context, *VectorsIdentity) (*VectorsData, error)
	//*
	// @brief This method is used to get vector ids from a segment
	//
	// @param GetVectorIDsParam, target collection and segment
	//
	// @return VectorIds
	GetVectorIDs(context.Context, *GetVectorIDsParam) (*VectorIds, error)
	//*
	// @brief This method is used to query vector in collection.
	//
	// @param SearchParam, search parameters.
	//
	// @return TopKQueryResult
	Search(context.Context, *SearchParam) (*TopKQueryResult, error)
	//*
	// @brief This method is used to query vector by id.
	//
	// @param SearchByIDParam, search parameters.
	//
	// @return TopKQueryResult
	SearchByID(context.Context, *SearchByIDParam) (*TopKQueryResult, error)
	//*
	// @brief This method is used to query vector in specified files.
	//
	// @param SearchInFilesParam, search in files paremeters.
	//
	// @return TopKQueryResult
	SearchInFiles(context.Context, *SearchInFilesParam) (*TopKQueryResult, error)
	//*
	// @brief This method is used to give the server status.
	//
	// @param Command, command string
	//
	// @return StringReply
	Cmd(context.Context, *Command) (*StringReply, error)
	//*
	// @brief This method is used to delete vector by id
	//
	// @param DeleteByIDParam, delete parameters.
	//
	// @return status
	DeleteByID(context.Context, *DeleteByIDParam) (*Status, error)
	//*
	// @brief This method is used to preload collection/partitions
	//
	// @param PreloadCollectionParam, target collection/partitions.
	//
	// @return Status
	PreloadCollection(context.Context, *PreloadCollectionParam) (*Status, error)
	//*
	// @brief This method is used to reload collection segments
	//
	// @param ReLoadSegmentsParam, target segments information.
	//
	// @return Status
	ReloadSegments(context.Context, *ReLoadSegmentsParam) (*Status, error)
	//*
	// @brief This method is used to flush buffer into storage.
	//
	// @param FlushParam, flush parameters
	//
	// @return Status
	Flush(context.Context, *FlushParam) (*Status, error)
	//*
	// @brief This method is used to compact collection
	//
	// @param CollectionName, target collection name.
	//
	// @return Status
	Compact(context.Context, *CollectionName) (*Status, error)
	CreateHybridCollection(context.Context, *Mapping) (*Status, error)
	HasHybridCollection(context.Context, *CollectionName) (*BoolReply, error)
	DropHybridCollection(context.Context, *CollectionName) (*Status, error)
	DescribeHybridCollection(context.Context, *CollectionName) (*Mapping, error)
	CountHybridCollection(context.Context, *CollectionName) (*CollectionRowCount, error)
	ShowHybridCollections(context.Context, *Command) (*MappingList, error)
	ShowHybridCollectionInfo(context.Context, *CollectionName) (*CollectionInfo, error)
	PreloadHybridCollection(context.Context, *CollectionName) (*Status, error)
	InsertEntity(context.Context, *HInsertParam) (*HEntityIDs, error)
	// TODO(yukun): will change to HQueryResult
	HybridSearch(context.Context, *HSearchParam) (*TopKQueryResult, error)
	HybridSearchInSegments(context.Context, *HSearchInSegmentsParam) (*TopKQueryResult, error)
	GetEntityByID(context.Context, *HEntityIdentity) (*HEntity, error)
	GetEntityIDs(context.Context, *HGetEntityIDsParam) (*HEntityIDs, error)
	DeleteEntitiesByID(context.Context, *HDeleteByIDParam) (*Status, error)
}

// UnimplementedMilvusServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMilvusServiceServer struct {
}

func (*UnimplementedMilvusServiceServer) CreateCollection(ctx context.Context, req *CollectionSchema) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCollection not implemented")
}
func (*UnimplementedMilvusServiceServer) HasCollection(ctx context.Context, req *CollectionName) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasCollection not implemented")
}
func (*UnimplementedMilvusServiceServer) DescribeCollection(ctx context.Context, req *CollectionName) (*CollectionSchema, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeCollection not implemented")
}
func (*UnimplementedMilvusServiceServer) CountCollection(ctx context.Context, req *CollectionName) (*CollectionRowCount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountCollection not implemented")
}
func (*UnimplementedMilvusServiceServer) ShowCollections(ctx context.Context, req *Command) (*CollectionNameList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowCollections not implemented")
}
func (*UnimplementedMilvusServiceServer) ShowCollectionInfo(ctx context.Context, req *CollectionName) (*CollectionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowCollectionInfo not implemented")
}
func (*UnimplementedMilvusServiceServer) DropCollection(ctx context.Context, req *CollectionName) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropCollection not implemented")
}
func (*UnimplementedMilvusServiceServer) CreateIndex(ctx context.Context, req *IndexParam) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIndex not implemented")
}
func (*UnimplementedMilvusServiceServer) DescribeIndex(ctx context.Context, req *CollectionName) (*IndexParam, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeIndex not implemented")
}
func (*UnimplementedMilvusServiceServer) DropIndex(ctx context.Context, req *CollectionName) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropIndex not implemented")
}
func (*UnimplementedMilvusServiceServer) CreatePartition(ctx context.Context, req *PartitionParam) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePartition not implemented")
}
func (*UnimplementedMilvusServiceServer) HasPartition(ctx context.Context, req *PartitionParam) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasPartition not implemented")
}
func (*UnimplementedMilvusServiceServer) ShowPartitions(ctx context.Context, req *CollectionName) (*PartitionList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowPartitions not implemented")
}
func (*UnimplementedMilvusServiceServer) DropPartition(ctx context.Context, req *PartitionParam) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropPartition not implemented")
}
func (*UnimplementedMilvusServiceServer) Insert(ctx context.Context, req *InsertParam) (*VectorIds, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Insert not implemented")
}
func (*UnimplementedMilvusServiceServer) GetVectorsByID(ctx context.Context, req *VectorsIdentity) (*VectorsData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVectorsByID not implemented")
}
func (*UnimplementedMilvusServiceServer) GetVectorIDs(ctx context.Context, req *GetVectorIDsParam) (*VectorIds, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVectorIDs not implemented")
}
func (*UnimplementedMilvusServiceServer) Search(ctx context.Context, req *SearchParam) (*TopKQueryResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (*UnimplementedMilvusServiceServer) SearchByID(ctx context.Context, req *SearchByIDParam) (*TopKQueryResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchByID not implemented")
}
func (*UnimplementedMilvusServiceServer) SearchInFiles(ctx context.Context, req *SearchInFilesParam) (*TopKQueryResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchInFiles not implemented")
}
func (*UnimplementedMilvusServiceServer) Cmd(ctx context.Context, req *Command) (*StringReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cmd not implemented")
}
func (*UnimplementedMilvusServiceServer) DeleteByID(ctx context.Context, req *DeleteByIDParam) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteByID not implemented")
}
func (*UnimplementedMilvusServiceServer) PreloadCollection(ctx context.Context, req *PreloadCollectionParam) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreloadCollection not implemented")
}
func (*UnimplementedMilvusServiceServer) ReloadSegments(ctx context.Context, req *ReLoadSegmentsParam) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReloadSegments not implemented")
}
func (*UnimplementedMilvusServiceServer) Flush(ctx context.Context, req *FlushParam) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Flush not implemented")
}
func (*UnimplementedMilvusServiceServer) Compact(ctx context.Context, req *CollectionName) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Compact not implemented")
}
func (*UnimplementedMilvusServiceServer) CreateHybridCollection(ctx context.Context, req *Mapping) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateHybridCollection not implemented")
}
func (*UnimplementedMilvusServiceServer) HasHybridCollection(ctx context.Context, req *CollectionName) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasHybridCollection not implemented")
}
func (*UnimplementedMilvusServiceServer) DropHybridCollection(ctx context.Context, req *CollectionName) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropHybridCollection not implemented")
}
func (*UnimplementedMilvusServiceServer) DescribeHybridCollection(ctx context.Context, req *CollectionName) (*Mapping, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeHybridCollection not implemented")
}
func (*UnimplementedMilvusServiceServer) CountHybridCollection(ctx context.Context, req *CollectionName) (*CollectionRowCount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountHybridCollection not implemented")
}
func (*UnimplementedMilvusServiceServer) ShowHybridCollections(ctx context.Context, req *Command) (*MappingList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowHybridCollections not implemented")
}
func (*UnimplementedMilvusServiceServer) ShowHybridCollectionInfo(ctx context.Context, req *CollectionName) (*CollectionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowHybridCollectionInfo not implemented")
}
func (*UnimplementedMilvusServiceServer) PreloadHybridCollection(ctx context.Context, req *CollectionName) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreloadHybridCollection not implemented")
}
func (*UnimplementedMilvusServiceServer) InsertEntity(ctx context.Context, req *HInsertParam) (*HEntityIDs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertEntity not implemented")
}
func (*UnimplementedMilvusServiceServer) HybridSearch(ctx context.Context, req *HSearchParam) (*TopKQueryResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HybridSearch not implemented")
}
func (*UnimplementedMilvusServiceServer) HybridSearchInSegments(ctx context.Context, req *HSearchInSegmentsParam) (*TopKQueryResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HybridSearchInSegments not implemented")
}
func (*UnimplementedMilvusServiceServer) GetEntityByID(ctx context.Context, req *HEntityIdentity) (*HEntity, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntityByID not implemented")
}
func (*UnimplementedMilvusServiceServer) GetEntityIDs(ctx context.Context, req *HGetEntityIDsParam) (*HEntityIDs, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEntityIDs not implemented")
}
func (*UnimplementedMilvusServiceServer) DeleteEntitiesByID(ctx context.Context, req *HDeleteByIDParam) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteEntitiesByID not implemented")
}

func RegisterMilvusServiceServer(s *grpc.Server, srv MilvusServiceServer) {
	s.RegisterService(&_MilvusService_serviceDesc, srv)
}

func _MilvusService_CreateCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionSchema)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).CreateCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/CreateCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).CreateCollection(ctx, req.(*CollectionSchema))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_HasCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).HasCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/HasCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).HasCollection(ctx, req.(*CollectionName))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_DescribeCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).DescribeCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/DescribeCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).DescribeCollection(ctx, req.(*CollectionName))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_CountCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).CountCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/CountCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).CountCollection(ctx, req.(*CollectionName))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_ShowCollections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).ShowCollections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/ShowCollections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).ShowCollections(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_ShowCollectionInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).ShowCollectionInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/ShowCollectionInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).ShowCollectionInfo(ctx, req.(*CollectionName))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_DropCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).DropCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/DropCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).DropCollection(ctx, req.(*CollectionName))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_CreateIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).CreateIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/CreateIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).CreateIndex(ctx, req.(*IndexParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_DescribeIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).DescribeIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/DescribeIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).DescribeIndex(ctx, req.(*CollectionName))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_DropIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).DropIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/DropIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).DropIndex(ctx, req.(*CollectionName))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_CreatePartition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartitionParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).CreatePartition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/CreatePartition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).CreatePartition(ctx, req.(*PartitionParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_HasPartition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartitionParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).HasPartition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/HasPartition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).HasPartition(ctx, req.(*PartitionParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_ShowPartitions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).ShowPartitions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/ShowPartitions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).ShowPartitions(ctx, req.(*CollectionName))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_DropPartition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartitionParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).DropPartition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/DropPartition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).DropPartition(ctx, req.(*PartitionParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_Insert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).Insert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/Insert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).Insert(ctx, req.(*InsertParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_GetVectorsByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VectorsIdentity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).GetVectorsByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/GetVectorsByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).GetVectorsByID(ctx, req.(*VectorsIdentity))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_GetVectorIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVectorIDsParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).GetVectorIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/GetVectorIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).GetVectorIDs(ctx, req.(*GetVectorIDsParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).Search(ctx, req.(*SearchParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_SearchByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchByIDParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).SearchByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/SearchByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).SearchByID(ctx, req.(*SearchByIDParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_SearchInFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchInFilesParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).SearchInFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/SearchInFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).SearchInFiles(ctx, req.(*SearchInFilesParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_Cmd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).Cmd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/Cmd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).Cmd(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_DeleteByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteByIDParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).DeleteByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/DeleteByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).DeleteByID(ctx, req.(*DeleteByIDParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_PreloadCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PreloadCollectionParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).PreloadCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/PreloadCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).PreloadCollection(ctx, req.(*PreloadCollectionParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_ReloadSegments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReLoadSegmentsParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).ReloadSegments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/ReloadSegments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).ReloadSegments(ctx, req.(*ReLoadSegmentsParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_Flush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlushParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).Flush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/Flush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).Flush(ctx, req.(*FlushParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_Compact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).Compact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/Compact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).Compact(ctx, req.(*CollectionName))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_CreateHybridCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Mapping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).CreateHybridCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/CreateHybridCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).CreateHybridCollection(ctx, req.(*Mapping))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_HasHybridCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).HasHybridCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/HasHybridCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).HasHybridCollection(ctx, req.(*CollectionName))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_DropHybridCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).DropHybridCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/DropHybridCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).DropHybridCollection(ctx, req.(*CollectionName))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_DescribeHybridCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).DescribeHybridCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/DescribeHybridCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).DescribeHybridCollection(ctx, req.(*CollectionName))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_CountHybridCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).CountHybridCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/CountHybridCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).CountHybridCollection(ctx, req.(*CollectionName))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_ShowHybridCollections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).ShowHybridCollections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/ShowHybridCollections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).ShowHybridCollections(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_ShowHybridCollectionInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).ShowHybridCollectionInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/ShowHybridCollectionInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).ShowHybridCollectionInfo(ctx, req.(*CollectionName))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_PreloadHybridCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).PreloadHybridCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/PreloadHybridCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).PreloadHybridCollection(ctx, req.(*CollectionName))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_InsertEntity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HInsertParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).InsertEntity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/InsertEntity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).InsertEntity(ctx, req.(*HInsertParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_HybridSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HSearchParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).HybridSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/HybridSearch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).HybridSearch(ctx, req.(*HSearchParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_HybridSearchInSegments_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HSearchInSegmentsParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).HybridSearchInSegments(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/HybridSearchInSegments",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).HybridSearchInSegments(ctx, req.(*HSearchInSegmentsParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_GetEntityByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HEntityIdentity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).GetEntityByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/GetEntityByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).GetEntityByID(ctx, req.(*HEntityIdentity))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_GetEntityIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HGetEntityIDsParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).GetEntityIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/GetEntityIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).GetEntityIDs(ctx, req.(*HGetEntityIDsParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_DeleteEntitiesByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HDeleteByIDParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).DeleteEntitiesByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/DeleteEntitiesByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).DeleteEntitiesByID(ctx, req.(*HDeleteByIDParam))
	}
	return interceptor(ctx, in, info, handler)
}

var _MilvusService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "milvus.grpc.MilvusService",
	HandlerType: (*MilvusServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCollection",
			Handler:    _MilvusService_CreateCollection_Handler,
		},
		{
			MethodName: "HasCollection",
			Handler:    _MilvusService_HasCollection_Handler,
		},
		{
			MethodName: "DescribeCollection",
			Handler:    _MilvusService_DescribeCollection_Handler,
		},
		{
			MethodName: "CountCollection",
			Handler:    _MilvusService_CountCollection_Handler,
		},
		{
			MethodName: "ShowCollections",
			Handler:    _MilvusService_ShowCollections_Handler,
		},
		{
			MethodName: "ShowCollectionInfo",
			Handler:    _MilvusService_ShowCollectionInfo_Handler,
		},
		{
			MethodName: "DropCollection",
			Handler:    _MilvusService_DropCollection_Handler,
		},
		{
			MethodName: "CreateIndex",
			Handler:    _MilvusService_CreateIndex_Handler,
		},
		{
			MethodName: "DescribeIndex",
			Handler:    _MilvusService_DescribeIndex_Handler,
		},
		{
			MethodName: "DropIndex",
			Handler:    _MilvusService_DropIndex_Handler,
		},
		{
			MethodName: "CreatePartition",
			Handler:    _MilvusService_CreatePartition_Handler,
		},
		{
			MethodName: "HasPartition",
			Handler:    _MilvusService_HasPartition_Handler,
		},
		{
			MethodName: "ShowPartitions",
			Handler:    _MilvusService_ShowPartitions_Handler,
		},
		{
			MethodName: "DropPartition",
			Handler:    _MilvusService_DropPartition_Handler,
		},
		{
			MethodName: "Insert",
			Handler:    _MilvusService_Insert_Handler,
		},
		{
			MethodName: "GetVectorsByID",
			Handler:    _MilvusService_GetVectorsByID_Handler,
		},
		{
			MethodName: "GetVectorIDs",
			Handler:    _MilvusService_GetVectorIDs_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _MilvusService_Search_Handler,
		},
		{
			MethodName: "SearchByID",
			Handler:    _MilvusService_SearchByID_Handler,
		},
		{
			MethodName: "SearchInFiles",
			Handler:    _MilvusService_SearchInFiles_Handler,
		},
		{
			MethodName: "Cmd",
			Handler:    _MilvusService_Cmd_Handler,
		},
		{
			MethodName: "DeleteByID",
			Handler:    _MilvusService_DeleteByID_Handler,
		},
		{
			MethodName: "PreloadCollection",
			Handler:    _MilvusService_PreloadCollection_Handler,
		},
		{
			MethodName: "ReloadSegments",
			Handler:    _MilvusService_ReloadSegments_Handler,
		},
		{
			MethodName: "Flush",
			Handler:    _MilvusService_Flush_Handler,
		},
		{
			MethodName: "Compact",
			Handler:    _MilvusService_Compact_Handler,
		},
		{
			MethodName: "CreateHybridCollection",
			Handler:    _MilvusService_CreateHybridCollection_Handler,
		},
		{
			MethodName: "HasHybridCollection",
			Handler:    _MilvusService_HasHybridCollection_Handler,
		},
		{
			MethodName: "DropHybridCollection",
			Handler:    _MilvusService_DropHybridCollection_Handler,
		},
		{
			MethodName: "DescribeHybridCollection",
			Handler:    _MilvusService_DescribeHybridCollection_Handler,
		},
		{
			MethodName: "CountHybridCollection",
			Handler:    _MilvusService_CountHybridCollection_Handler,
		},
		{
			MethodName: "ShowHybridCollections",
			Handler:    _MilvusService_ShowHybridCollections_Handler,
		},
		{
			MethodName: "ShowHybridCollectionInfo",
			Handler:    _MilvusService_ShowHybridCollectionInfo_Handler,
		},
		{
			MethodName: "PreloadHybridCollection",
			Handler:    _MilvusService_PreloadHybridCollection_Handler,
		},
		{
			MethodName: "InsertEntity",
			Handler:    _MilvusService_InsertEntity_Handler,
		},
		{
			MethodName: "HybridSearch",
			Handler:    _MilvusService_HybridSearch_Handler,
		},
		{
			MethodName: "HybridSearchInSegments",
			Handler:    _MilvusService_HybridSearchInSegments_Handler,
		},
		{
			MethodName: "GetEntityByID",
			Handler:    _MilvusService_GetEntityByID_Handler,
		},
		{
			MethodName: "GetEntityIDs",
			Handler:    _MilvusService_GetEntityIDs_Handler,
		},
		{
			MethodName: "DeleteEntitiesByID",
			Handler:    _MilvusService_DeleteEntitiesByID_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "milvus.proto",
}
