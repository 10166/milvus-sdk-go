// Code generated by protoc-gen-go. DO NOT EDIT.
// source: milvus.proto

package milvus_grpc

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//*
// @brief general usage
type KeyValuePair struct {
	Key                  string   `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value                string   `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *KeyValuePair) Reset()         { *m = KeyValuePair{} }
func (m *KeyValuePair) String() string { return proto.CompactTextString(m) }
func (*KeyValuePair) ProtoMessage()    {}
func (*KeyValuePair) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{0}
}

func (m *KeyValuePair) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_KeyValuePair.Unmarshal(m, b)
}
func (m *KeyValuePair) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_KeyValuePair.Marshal(b, m, deterministic)
}
func (m *KeyValuePair) XXX_Merge(src proto.Message) {
	xxx_messageInfo_KeyValuePair.Merge(m, src)
}
func (m *KeyValuePair) XXX_Size() int {
	return xxx_messageInfo_KeyValuePair.Size(m)
}
func (m *KeyValuePair) XXX_DiscardUnknown() {
	xxx_messageInfo_KeyValuePair.DiscardUnknown(m)
}

var xxx_messageInfo_KeyValuePair proto.InternalMessageInfo

func (m *KeyValuePair) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *KeyValuePair) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

//*
// @brief Collection name
type CollectionName struct {
	CollectionName       string   `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CollectionName) Reset()         { *m = CollectionName{} }
func (m *CollectionName) String() string { return proto.CompactTextString(m) }
func (*CollectionName) ProtoMessage()    {}
func (*CollectionName) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{1}
}

func (m *CollectionName) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CollectionName.Unmarshal(m, b)
}
func (m *CollectionName) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CollectionName.Marshal(b, m, deterministic)
}
func (m *CollectionName) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CollectionName.Merge(m, src)
}
func (m *CollectionName) XXX_Size() int {
	return xxx_messageInfo_CollectionName.Size(m)
}
func (m *CollectionName) XXX_DiscardUnknown() {
	xxx_messageInfo_CollectionName.DiscardUnknown(m)
}

var xxx_messageInfo_CollectionName proto.InternalMessageInfo

func (m *CollectionName) GetCollectionName() string {
	if m != nil {
		return m.CollectionName
	}
	return ""
}

//*
// @brief Collection name list
type CollectionNameList struct {
	Status               *Status  `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	CollectionNames      []string `protobuf:"bytes,2,rep,name=collection_names,json=collectionNames,proto3" json:"collection_names,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CollectionNameList) Reset()         { *m = CollectionNameList{} }
func (m *CollectionNameList) String() string { return proto.CompactTextString(m) }
func (*CollectionNameList) ProtoMessage()    {}
func (*CollectionNameList) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{2}
}

func (m *CollectionNameList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CollectionNameList.Unmarshal(m, b)
}
func (m *CollectionNameList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CollectionNameList.Marshal(b, m, deterministic)
}
func (m *CollectionNameList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CollectionNameList.Merge(m, src)
}
func (m *CollectionNameList) XXX_Size() int {
	return xxx_messageInfo_CollectionNameList.Size(m)
}
func (m *CollectionNameList) XXX_DiscardUnknown() {
	xxx_messageInfo_CollectionNameList.DiscardUnknown(m)
}

var xxx_messageInfo_CollectionNameList proto.InternalMessageInfo

func (m *CollectionNameList) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *CollectionNameList) GetCollectionNames() []string {
	if m != nil {
		return m.CollectionNames
	}
	return nil
}

//*
// @brief Collection schema
// metric_type: 1-L2, 2-IP
type CollectionSchema struct {
	Status               *Status         `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	CollectionName       string          `protobuf:"bytes,2,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	Dimension            int64           `protobuf:"varint,3,opt,name=dimension,proto3" json:"dimension,omitempty"`
	IndexFileSize        int64           `protobuf:"varint,4,opt,name=index_file_size,json=indexFileSize,proto3" json:"index_file_size,omitempty"`
	MetricType           int32           `protobuf:"varint,5,opt,name=metric_type,json=metricType,proto3" json:"metric_type,omitempty"`
	ExtraParams          []*KeyValuePair `protobuf:"bytes,6,rep,name=extra_params,json=extraParams,proto3" json:"extra_params,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *CollectionSchema) Reset()         { *m = CollectionSchema{} }
func (m *CollectionSchema) String() string { return proto.CompactTextString(m) }
func (*CollectionSchema) ProtoMessage()    {}
func (*CollectionSchema) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{3}
}

func (m *CollectionSchema) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CollectionSchema.Unmarshal(m, b)
}
func (m *CollectionSchema) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CollectionSchema.Marshal(b, m, deterministic)
}
func (m *CollectionSchema) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CollectionSchema.Merge(m, src)
}
func (m *CollectionSchema) XXX_Size() int {
	return xxx_messageInfo_CollectionSchema.Size(m)
}
func (m *CollectionSchema) XXX_DiscardUnknown() {
	xxx_messageInfo_CollectionSchema.DiscardUnknown(m)
}

var xxx_messageInfo_CollectionSchema proto.InternalMessageInfo

func (m *CollectionSchema) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *CollectionSchema) GetCollectionName() string {
	if m != nil {
		return m.CollectionName
	}
	return ""
}

func (m *CollectionSchema) GetDimension() int64 {
	if m != nil {
		return m.Dimension
	}
	return 0
}

func (m *CollectionSchema) GetIndexFileSize() int64 {
	if m != nil {
		return m.IndexFileSize
	}
	return 0
}

func (m *CollectionSchema) GetMetricType() int32 {
	if m != nil {
		return m.MetricType
	}
	return 0
}

func (m *CollectionSchema) GetExtraParams() []*KeyValuePair {
	if m != nil {
		return m.ExtraParams
	}
	return nil
}

//*
// @brief Params of partition
type PartitionParam struct {
	CollectionName       string   `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	Tag                  string   `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PartitionParam) Reset()         { *m = PartitionParam{} }
func (m *PartitionParam) String() string { return proto.CompactTextString(m) }
func (*PartitionParam) ProtoMessage()    {}
func (*PartitionParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{4}
}

func (m *PartitionParam) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PartitionParam.Unmarshal(m, b)
}
func (m *PartitionParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PartitionParam.Marshal(b, m, deterministic)
}
func (m *PartitionParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PartitionParam.Merge(m, src)
}
func (m *PartitionParam) XXX_Size() int {
	return xxx_messageInfo_PartitionParam.Size(m)
}
func (m *PartitionParam) XXX_DiscardUnknown() {
	xxx_messageInfo_PartitionParam.DiscardUnknown(m)
}

var xxx_messageInfo_PartitionParam proto.InternalMessageInfo

func (m *PartitionParam) GetCollectionName() string {
	if m != nil {
		return m.CollectionName
	}
	return ""
}

func (m *PartitionParam) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

//*
// @brief Partition list
type PartitionList struct {
	Status               *Status  `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	PartitionTagArray    []string `protobuf:"bytes,2,rep,name=partition_tag_array,json=partitionTagArray,proto3" json:"partition_tag_array,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PartitionList) Reset()         { *m = PartitionList{} }
func (m *PartitionList) String() string { return proto.CompactTextString(m) }
func (*PartitionList) ProtoMessage()    {}
func (*PartitionList) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{5}
}

func (m *PartitionList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PartitionList.Unmarshal(m, b)
}
func (m *PartitionList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PartitionList.Marshal(b, m, deterministic)
}
func (m *PartitionList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PartitionList.Merge(m, src)
}
func (m *PartitionList) XXX_Size() int {
	return xxx_messageInfo_PartitionList.Size(m)
}
func (m *PartitionList) XXX_DiscardUnknown() {
	xxx_messageInfo_PartitionList.DiscardUnknown(m)
}

var xxx_messageInfo_PartitionList proto.InternalMessageInfo

func (m *PartitionList) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *PartitionList) GetPartitionTagArray() []string {
	if m != nil {
		return m.PartitionTagArray
	}
	return nil
}

//*
// @brief Record inserted
type RowRecord struct {
	FloatData            []float32 `protobuf:"fixed32,1,rep,packed,name=float_data,json=floatData,proto3" json:"float_data,omitempty"`
	BinaryData           []byte    `protobuf:"bytes,2,opt,name=binary_data,json=binaryData,proto3" json:"binary_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *RowRecord) Reset()         { *m = RowRecord{} }
func (m *RowRecord) String() string { return proto.CompactTextString(m) }
func (*RowRecord) ProtoMessage()    {}
func (*RowRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{6}
}

func (m *RowRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RowRecord.Unmarshal(m, b)
}
func (m *RowRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RowRecord.Marshal(b, m, deterministic)
}
func (m *RowRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RowRecord.Merge(m, src)
}
func (m *RowRecord) XXX_Size() int {
	return xxx_messageInfo_RowRecord.Size(m)
}
func (m *RowRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_RowRecord.DiscardUnknown(m)
}

var xxx_messageInfo_RowRecord proto.InternalMessageInfo

func (m *RowRecord) GetFloatData() []float32 {
	if m != nil {
		return m.FloatData
	}
	return nil
}

func (m *RowRecord) GetBinaryData() []byte {
	if m != nil {
		return m.BinaryData
	}
	return nil
}

//*
// @brief Params to be inserted
type InsertParam struct {
	CollectionName       string          `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	RowRecordArray       []*RowRecord    `protobuf:"bytes,2,rep,name=row_record_array,json=rowRecordArray,proto3" json:"row_record_array,omitempty"`
	RowIdArray           []int64         `protobuf:"varint,3,rep,packed,name=row_id_array,json=rowIdArray,proto3" json:"row_id_array,omitempty"`
	PartitionTag         string          `protobuf:"bytes,4,opt,name=partition_tag,json=partitionTag,proto3" json:"partition_tag,omitempty"`
	ExtraParams          []*KeyValuePair `protobuf:"bytes,5,rep,name=extra_params,json=extraParams,proto3" json:"extra_params,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *InsertParam) Reset()         { *m = InsertParam{} }
func (m *InsertParam) String() string { return proto.CompactTextString(m) }
func (*InsertParam) ProtoMessage()    {}
func (*InsertParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{7}
}

func (m *InsertParam) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_InsertParam.Unmarshal(m, b)
}
func (m *InsertParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_InsertParam.Marshal(b, m, deterministic)
}
func (m *InsertParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InsertParam.Merge(m, src)
}
func (m *InsertParam) XXX_Size() int {
	return xxx_messageInfo_InsertParam.Size(m)
}
func (m *InsertParam) XXX_DiscardUnknown() {
	xxx_messageInfo_InsertParam.DiscardUnknown(m)
}

var xxx_messageInfo_InsertParam proto.InternalMessageInfo

func (m *InsertParam) GetCollectionName() string {
	if m != nil {
		return m.CollectionName
	}
	return ""
}

func (m *InsertParam) GetRowRecordArray() []*RowRecord {
	if m != nil {
		return m.RowRecordArray
	}
	return nil
}

func (m *InsertParam) GetRowIdArray() []int64 {
	if m != nil {
		return m.RowIdArray
	}
	return nil
}

func (m *InsertParam) GetPartitionTag() string {
	if m != nil {
		return m.PartitionTag
	}
	return ""
}

func (m *InsertParam) GetExtraParams() []*KeyValuePair {
	if m != nil {
		return m.ExtraParams
	}
	return nil
}

//*
// @brief Vector ids
type VectorIds struct {
	Status               *Status  `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	VectorIdArray        []int64  `protobuf:"varint,2,rep,packed,name=vector_id_array,json=vectorIdArray,proto3" json:"vector_id_array,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VectorIds) Reset()         { *m = VectorIds{} }
func (m *VectorIds) String() string { return proto.CompactTextString(m) }
func (*VectorIds) ProtoMessage()    {}
func (*VectorIds) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{8}
}

func (m *VectorIds) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VectorIds.Unmarshal(m, b)
}
func (m *VectorIds) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VectorIds.Marshal(b, m, deterministic)
}
func (m *VectorIds) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VectorIds.Merge(m, src)
}
func (m *VectorIds) XXX_Size() int {
	return xxx_messageInfo_VectorIds.Size(m)
}
func (m *VectorIds) XXX_DiscardUnknown() {
	xxx_messageInfo_VectorIds.DiscardUnknown(m)
}

var xxx_messageInfo_VectorIds proto.InternalMessageInfo

func (m *VectorIds) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *VectorIds) GetVectorIdArray() []int64 {
	if m != nil {
		return m.VectorIdArray
	}
	return nil
}

//*
// @brief Params for searching vector
type SearchParam struct {
	CollectionName       string          `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	PartitionTagArray    []string        `protobuf:"bytes,2,rep,name=partition_tag_array,json=partitionTagArray,proto3" json:"partition_tag_array,omitempty"`
	QueryRecordArray     []*RowRecord    `protobuf:"bytes,3,rep,name=query_record_array,json=queryRecordArray,proto3" json:"query_record_array,omitempty"`
	Topk                 int64           `protobuf:"varint,4,opt,name=topk,proto3" json:"topk,omitempty"`
	ExtraParams          []*KeyValuePair `protobuf:"bytes,5,rep,name=extra_params,json=extraParams,proto3" json:"extra_params,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *SearchParam) Reset()         { *m = SearchParam{} }
func (m *SearchParam) String() string { return proto.CompactTextString(m) }
func (*SearchParam) ProtoMessage()    {}
func (*SearchParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{9}
}

func (m *SearchParam) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SearchParam.Unmarshal(m, b)
}
func (m *SearchParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SearchParam.Marshal(b, m, deterministic)
}
func (m *SearchParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchParam.Merge(m, src)
}
func (m *SearchParam) XXX_Size() int {
	return xxx_messageInfo_SearchParam.Size(m)
}
func (m *SearchParam) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchParam.DiscardUnknown(m)
}

var xxx_messageInfo_SearchParam proto.InternalMessageInfo

func (m *SearchParam) GetCollectionName() string {
	if m != nil {
		return m.CollectionName
	}
	return ""
}

func (m *SearchParam) GetPartitionTagArray() []string {
	if m != nil {
		return m.PartitionTagArray
	}
	return nil
}

func (m *SearchParam) GetQueryRecordArray() []*RowRecord {
	if m != nil {
		return m.QueryRecordArray
	}
	return nil
}

func (m *SearchParam) GetTopk() int64 {
	if m != nil {
		return m.Topk
	}
	return 0
}

func (m *SearchParam) GetExtraParams() []*KeyValuePair {
	if m != nil {
		return m.ExtraParams
	}
	return nil
}

//*
// @brief Params for searching vector in files
type SearchInFilesParam struct {
	FileIdArray          []string     `protobuf:"bytes,1,rep,name=file_id_array,json=fileIdArray,proto3" json:"file_id_array,omitempty"`
	SearchParam          *SearchParam `protobuf:"bytes,2,opt,name=search_param,json=searchParam,proto3" json:"search_param,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *SearchInFilesParam) Reset()         { *m = SearchInFilesParam{} }
func (m *SearchInFilesParam) String() string { return proto.CompactTextString(m) }
func (*SearchInFilesParam) ProtoMessage()    {}
func (*SearchInFilesParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{10}
}

func (m *SearchInFilesParam) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SearchInFilesParam.Unmarshal(m, b)
}
func (m *SearchInFilesParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SearchInFilesParam.Marshal(b, m, deterministic)
}
func (m *SearchInFilesParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchInFilesParam.Merge(m, src)
}
func (m *SearchInFilesParam) XXX_Size() int {
	return xxx_messageInfo_SearchInFilesParam.Size(m)
}
func (m *SearchInFilesParam) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchInFilesParam.DiscardUnknown(m)
}

var xxx_messageInfo_SearchInFilesParam proto.InternalMessageInfo

func (m *SearchInFilesParam) GetFileIdArray() []string {
	if m != nil {
		return m.FileIdArray
	}
	return nil
}

func (m *SearchInFilesParam) GetSearchParam() *SearchParam {
	if m != nil {
		return m.SearchParam
	}
	return nil
}

//*
// @brief Params for searching vector by ID
type SearchByIDParam struct {
	CollectionName       string          `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	PartitionTagArray    []string        `protobuf:"bytes,2,rep,name=partition_tag_array,json=partitionTagArray,proto3" json:"partition_tag_array,omitempty"`
	Id                   int64           `protobuf:"varint,3,opt,name=id,proto3" json:"id,omitempty"`
	Topk                 int64           `protobuf:"varint,4,opt,name=topk,proto3" json:"topk,omitempty"`
	ExtraParams          []*KeyValuePair `protobuf:"bytes,5,rep,name=extra_params,json=extraParams,proto3" json:"extra_params,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *SearchByIDParam) Reset()         { *m = SearchByIDParam{} }
func (m *SearchByIDParam) String() string { return proto.CompactTextString(m) }
func (*SearchByIDParam) ProtoMessage()    {}
func (*SearchByIDParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{11}
}

func (m *SearchByIDParam) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SearchByIDParam.Unmarshal(m, b)
}
func (m *SearchByIDParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SearchByIDParam.Marshal(b, m, deterministic)
}
func (m *SearchByIDParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchByIDParam.Merge(m, src)
}
func (m *SearchByIDParam) XXX_Size() int {
	return xxx_messageInfo_SearchByIDParam.Size(m)
}
func (m *SearchByIDParam) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchByIDParam.DiscardUnknown(m)
}

var xxx_messageInfo_SearchByIDParam proto.InternalMessageInfo

func (m *SearchByIDParam) GetCollectionName() string {
	if m != nil {
		return m.CollectionName
	}
	return ""
}

func (m *SearchByIDParam) GetPartitionTagArray() []string {
	if m != nil {
		return m.PartitionTagArray
	}
	return nil
}

func (m *SearchByIDParam) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *SearchByIDParam) GetTopk() int64 {
	if m != nil {
		return m.Topk
	}
	return 0
}

func (m *SearchByIDParam) GetExtraParams() []*KeyValuePair {
	if m != nil {
		return m.ExtraParams
	}
	return nil
}

//*
// @brief Query result params
type TopKQueryResult struct {
	Status               *Status   `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	RowNum               int64     `protobuf:"varint,2,opt,name=row_num,json=rowNum,proto3" json:"row_num,omitempty"`
	Ids                  []int64   `protobuf:"varint,3,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	Distances            []float32 `protobuf:"fixed32,4,rep,packed,name=distances,proto3" json:"distances,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *TopKQueryResult) Reset()         { *m = TopKQueryResult{} }
func (m *TopKQueryResult) String() string { return proto.CompactTextString(m) }
func (*TopKQueryResult) ProtoMessage()    {}
func (*TopKQueryResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{12}
}

func (m *TopKQueryResult) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TopKQueryResult.Unmarshal(m, b)
}
func (m *TopKQueryResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TopKQueryResult.Marshal(b, m, deterministic)
}
func (m *TopKQueryResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TopKQueryResult.Merge(m, src)
}
func (m *TopKQueryResult) XXX_Size() int {
	return xxx_messageInfo_TopKQueryResult.Size(m)
}
func (m *TopKQueryResult) XXX_DiscardUnknown() {
	xxx_messageInfo_TopKQueryResult.DiscardUnknown(m)
}

var xxx_messageInfo_TopKQueryResult proto.InternalMessageInfo

func (m *TopKQueryResult) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *TopKQueryResult) GetRowNum() int64 {
	if m != nil {
		return m.RowNum
	}
	return 0
}

func (m *TopKQueryResult) GetIds() []int64 {
	if m != nil {
		return m.Ids
	}
	return nil
}

func (m *TopKQueryResult) GetDistances() []float32 {
	if m != nil {
		return m.Distances
	}
	return nil
}

//*
// @brief Server string Reply
type StringReply struct {
	Status               *Status  `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	StringReply          string   `protobuf:"bytes,2,opt,name=string_reply,json=stringReply,proto3" json:"string_reply,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StringReply) Reset()         { *m = StringReply{} }
func (m *StringReply) String() string { return proto.CompactTextString(m) }
func (*StringReply) ProtoMessage()    {}
func (*StringReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{13}
}

func (m *StringReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StringReply.Unmarshal(m, b)
}
func (m *StringReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StringReply.Marshal(b, m, deterministic)
}
func (m *StringReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StringReply.Merge(m, src)
}
func (m *StringReply) XXX_Size() int {
	return xxx_messageInfo_StringReply.Size(m)
}
func (m *StringReply) XXX_DiscardUnknown() {
	xxx_messageInfo_StringReply.DiscardUnknown(m)
}

var xxx_messageInfo_StringReply proto.InternalMessageInfo

func (m *StringReply) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *StringReply) GetStringReply() string {
	if m != nil {
		return m.StringReply
	}
	return ""
}

//*
// @brief Server bool Reply
type BoolReply struct {
	Status               *Status  `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	BoolReply            bool     `protobuf:"varint,2,opt,name=bool_reply,json=boolReply,proto3" json:"bool_reply,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BoolReply) Reset()         { *m = BoolReply{} }
func (m *BoolReply) String() string { return proto.CompactTextString(m) }
func (*BoolReply) ProtoMessage()    {}
func (*BoolReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{14}
}

func (m *BoolReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BoolReply.Unmarshal(m, b)
}
func (m *BoolReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BoolReply.Marshal(b, m, deterministic)
}
func (m *BoolReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BoolReply.Merge(m, src)
}
func (m *BoolReply) XXX_Size() int {
	return xxx_messageInfo_BoolReply.Size(m)
}
func (m *BoolReply) XXX_DiscardUnknown() {
	xxx_messageInfo_BoolReply.DiscardUnknown(m)
}

var xxx_messageInfo_BoolReply proto.InternalMessageInfo

func (m *BoolReply) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *BoolReply) GetBoolReply() bool {
	if m != nil {
		return m.BoolReply
	}
	return false
}

//*
// @brief Return collection row count
type CollectionRowCount struct {
	Status               *Status  `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	CollectionRowCount   int64    `protobuf:"varint,2,opt,name=collection_row_count,json=collectionRowCount,proto3" json:"collection_row_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CollectionRowCount) Reset()         { *m = CollectionRowCount{} }
func (m *CollectionRowCount) String() string { return proto.CompactTextString(m) }
func (*CollectionRowCount) ProtoMessage()    {}
func (*CollectionRowCount) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{15}
}

func (m *CollectionRowCount) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CollectionRowCount.Unmarshal(m, b)
}
func (m *CollectionRowCount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CollectionRowCount.Marshal(b, m, deterministic)
}
func (m *CollectionRowCount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CollectionRowCount.Merge(m, src)
}
func (m *CollectionRowCount) XXX_Size() int {
	return xxx_messageInfo_CollectionRowCount.Size(m)
}
func (m *CollectionRowCount) XXX_DiscardUnknown() {
	xxx_messageInfo_CollectionRowCount.DiscardUnknown(m)
}

var xxx_messageInfo_CollectionRowCount proto.InternalMessageInfo

func (m *CollectionRowCount) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *CollectionRowCount) GetCollectionRowCount() int64 {
	if m != nil {
		return m.CollectionRowCount
	}
	return 0
}

//*
// @brief Give server Command
type Command struct {
	Cmd                  string   `protobuf:"bytes,1,opt,name=cmd,proto3" json:"cmd,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Command) Reset()         { *m = Command{} }
func (m *Command) String() string { return proto.CompactTextString(m) }
func (*Command) ProtoMessage()    {}
func (*Command) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{16}
}

func (m *Command) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Command.Unmarshal(m, b)
}
func (m *Command) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Command.Marshal(b, m, deterministic)
}
func (m *Command) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Command.Merge(m, src)
}
func (m *Command) XXX_Size() int {
	return xxx_messageInfo_Command.Size(m)
}
func (m *Command) XXX_DiscardUnknown() {
	xxx_messageInfo_Command.DiscardUnknown(m)
}

var xxx_messageInfo_Command proto.InternalMessageInfo

func (m *Command) GetCmd() string {
	if m != nil {
		return m.Cmd
	}
	return ""
}

//*
// @brief Index params
// @index_type: 0-invalid, 1-idmap, 2-ivflat, 3-ivfsq8, 4-nsgmix
type IndexParam struct {
	Status               *Status         `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	CollectionName       string          `protobuf:"bytes,2,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	IndexType            int32           `protobuf:"varint,3,opt,name=index_type,json=indexType,proto3" json:"index_type,omitempty"`
	ExtraParams          []*KeyValuePair `protobuf:"bytes,4,rep,name=extra_params,json=extraParams,proto3" json:"extra_params,omitempty"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *IndexParam) Reset()         { *m = IndexParam{} }
func (m *IndexParam) String() string { return proto.CompactTextString(m) }
func (*IndexParam) ProtoMessage()    {}
func (*IndexParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{17}
}

func (m *IndexParam) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IndexParam.Unmarshal(m, b)
}
func (m *IndexParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IndexParam.Marshal(b, m, deterministic)
}
func (m *IndexParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IndexParam.Merge(m, src)
}
func (m *IndexParam) XXX_Size() int {
	return xxx_messageInfo_IndexParam.Size(m)
}
func (m *IndexParam) XXX_DiscardUnknown() {
	xxx_messageInfo_IndexParam.DiscardUnknown(m)
}

var xxx_messageInfo_IndexParam proto.InternalMessageInfo

func (m *IndexParam) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *IndexParam) GetCollectionName() string {
	if m != nil {
		return m.CollectionName
	}
	return ""
}

func (m *IndexParam) GetIndexType() int32 {
	if m != nil {
		return m.IndexType
	}
	return 0
}

func (m *IndexParam) GetExtraParams() []*KeyValuePair {
	if m != nil {
		return m.ExtraParams
	}
	return nil
}

//*
// @brief Flush params
type FlushParam struct {
	CollectionNameArray  []string `protobuf:"bytes,1,rep,name=collection_name_array,json=collectionNameArray,proto3" json:"collection_name_array,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FlushParam) Reset()         { *m = FlushParam{} }
func (m *FlushParam) String() string { return proto.CompactTextString(m) }
func (*FlushParam) ProtoMessage()    {}
func (*FlushParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{18}
}

func (m *FlushParam) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FlushParam.Unmarshal(m, b)
}
func (m *FlushParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FlushParam.Marshal(b, m, deterministic)
}
func (m *FlushParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FlushParam.Merge(m, src)
}
func (m *FlushParam) XXX_Size() int {
	return xxx_messageInfo_FlushParam.Size(m)
}
func (m *FlushParam) XXX_DiscardUnknown() {
	xxx_messageInfo_FlushParam.DiscardUnknown(m)
}

var xxx_messageInfo_FlushParam proto.InternalMessageInfo

func (m *FlushParam) GetCollectionNameArray() []string {
	if m != nil {
		return m.CollectionNameArray
	}
	return nil
}

//*
// @brief Flush params
type DeleteByIDParam struct {
	CollectionName       string   `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	IdArray              []int64  `protobuf:"varint,2,rep,packed,name=id_array,json=idArray,proto3" json:"id_array,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteByIDParam) Reset()         { *m = DeleteByIDParam{} }
func (m *DeleteByIDParam) String() string { return proto.CompactTextString(m) }
func (*DeleteByIDParam) ProtoMessage()    {}
func (*DeleteByIDParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{19}
}

func (m *DeleteByIDParam) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DeleteByIDParam.Unmarshal(m, b)
}
func (m *DeleteByIDParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DeleteByIDParam.Marshal(b, m, deterministic)
}
func (m *DeleteByIDParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteByIDParam.Merge(m, src)
}
func (m *DeleteByIDParam) XXX_Size() int {
	return xxx_messageInfo_DeleteByIDParam.Size(m)
}
func (m *DeleteByIDParam) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteByIDParam.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteByIDParam proto.InternalMessageInfo

func (m *DeleteByIDParam) GetCollectionName() string {
	if m != nil {
		return m.CollectionName
	}
	return ""
}

func (m *DeleteByIDParam) GetIdArray() []int64 {
	if m != nil {
		return m.IdArray
	}
	return nil
}

//*
// @brief segment statistics
type SegmentStat struct {
	SegmentName          string   `protobuf:"bytes,1,opt,name=segment_name,json=segmentName,proto3" json:"segment_name,omitempty"`
	RowCount             int64    `protobuf:"varint,2,opt,name=row_count,json=rowCount,proto3" json:"row_count,omitempty"`
	IndexName            string   `protobuf:"bytes,3,opt,name=index_name,json=indexName,proto3" json:"index_name,omitempty"`
	DataSize             int64    `protobuf:"varint,4,opt,name=data_size,json=dataSize,proto3" json:"data_size,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SegmentStat) Reset()         { *m = SegmentStat{} }
func (m *SegmentStat) String() string { return proto.CompactTextString(m) }
func (*SegmentStat) ProtoMessage()    {}
func (*SegmentStat) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{20}
}

func (m *SegmentStat) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SegmentStat.Unmarshal(m, b)
}
func (m *SegmentStat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SegmentStat.Marshal(b, m, deterministic)
}
func (m *SegmentStat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SegmentStat.Merge(m, src)
}
func (m *SegmentStat) XXX_Size() int {
	return xxx_messageInfo_SegmentStat.Size(m)
}
func (m *SegmentStat) XXX_DiscardUnknown() {
	xxx_messageInfo_SegmentStat.DiscardUnknown(m)
}

var xxx_messageInfo_SegmentStat proto.InternalMessageInfo

func (m *SegmentStat) GetSegmentName() string {
	if m != nil {
		return m.SegmentName
	}
	return ""
}

func (m *SegmentStat) GetRowCount() int64 {
	if m != nil {
		return m.RowCount
	}
	return 0
}

func (m *SegmentStat) GetIndexName() string {
	if m != nil {
		return m.IndexName
	}
	return ""
}

func (m *SegmentStat) GetDataSize() int64 {
	if m != nil {
		return m.DataSize
	}
	return 0
}

//*
// @brief collection statistics
type PartitionStat struct {
	Tag                  string         `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitempty"`
	TotalRowCount        int64          `protobuf:"varint,2,opt,name=total_row_count,json=totalRowCount,proto3" json:"total_row_count,omitempty"`
	SegmentsStat         []*SegmentStat `protobuf:"bytes,3,rep,name=segments_stat,json=segmentsStat,proto3" json:"segments_stat,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *PartitionStat) Reset()         { *m = PartitionStat{} }
func (m *PartitionStat) String() string { return proto.CompactTextString(m) }
func (*PartitionStat) ProtoMessage()    {}
func (*PartitionStat) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{21}
}

func (m *PartitionStat) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PartitionStat.Unmarshal(m, b)
}
func (m *PartitionStat) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PartitionStat.Marshal(b, m, deterministic)
}
func (m *PartitionStat) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PartitionStat.Merge(m, src)
}
func (m *PartitionStat) XXX_Size() int {
	return xxx_messageInfo_PartitionStat.Size(m)
}
func (m *PartitionStat) XXX_DiscardUnknown() {
	xxx_messageInfo_PartitionStat.DiscardUnknown(m)
}

var xxx_messageInfo_PartitionStat proto.InternalMessageInfo

func (m *PartitionStat) GetTag() string {
	if m != nil {
		return m.Tag
	}
	return ""
}

func (m *PartitionStat) GetTotalRowCount() int64 {
	if m != nil {
		return m.TotalRowCount
	}
	return 0
}

func (m *PartitionStat) GetSegmentsStat() []*SegmentStat {
	if m != nil {
		return m.SegmentsStat
	}
	return nil
}

//*
// @brief collection information
type CollectionInfo struct {
	Status               *Status          `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	TotalRowCount        int64            `protobuf:"varint,2,opt,name=total_row_count,json=totalRowCount,proto3" json:"total_row_count,omitempty"`
	PartitionsStat       []*PartitionStat `protobuf:"bytes,3,rep,name=partitions_stat,json=partitionsStat,proto3" json:"partitions_stat,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *CollectionInfo) Reset()         { *m = CollectionInfo{} }
func (m *CollectionInfo) String() string { return proto.CompactTextString(m) }
func (*CollectionInfo) ProtoMessage()    {}
func (*CollectionInfo) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{22}
}

func (m *CollectionInfo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CollectionInfo.Unmarshal(m, b)
}
func (m *CollectionInfo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CollectionInfo.Marshal(b, m, deterministic)
}
func (m *CollectionInfo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CollectionInfo.Merge(m, src)
}
func (m *CollectionInfo) XXX_Size() int {
	return xxx_messageInfo_CollectionInfo.Size(m)
}
func (m *CollectionInfo) XXX_DiscardUnknown() {
	xxx_messageInfo_CollectionInfo.DiscardUnknown(m)
}

var xxx_messageInfo_CollectionInfo proto.InternalMessageInfo

func (m *CollectionInfo) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *CollectionInfo) GetTotalRowCount() int64 {
	if m != nil {
		return m.TotalRowCount
	}
	return 0
}

func (m *CollectionInfo) GetPartitionsStat() []*PartitionStat {
	if m != nil {
		return m.PartitionsStat
	}
	return nil
}

//*
// @brief vector identity
type VectorIdentity struct {
	CollectionName       string   `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	Id                   int64    `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *VectorIdentity) Reset()         { *m = VectorIdentity{} }
func (m *VectorIdentity) String() string { return proto.CompactTextString(m) }
func (*VectorIdentity) ProtoMessage()    {}
func (*VectorIdentity) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{23}
}

func (m *VectorIdentity) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VectorIdentity.Unmarshal(m, b)
}
func (m *VectorIdentity) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VectorIdentity.Marshal(b, m, deterministic)
}
func (m *VectorIdentity) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VectorIdentity.Merge(m, src)
}
func (m *VectorIdentity) XXX_Size() int {
	return xxx_messageInfo_VectorIdentity.Size(m)
}
func (m *VectorIdentity) XXX_DiscardUnknown() {
	xxx_messageInfo_VectorIdentity.DiscardUnknown(m)
}

var xxx_messageInfo_VectorIdentity proto.InternalMessageInfo

func (m *VectorIdentity) GetCollectionName() string {
	if m != nil {
		return m.CollectionName
	}
	return ""
}

func (m *VectorIdentity) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

//*
// @brief vector data
type VectorData struct {
	Status               *Status    `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	VectorData           *RowRecord `protobuf:"bytes,2,opt,name=vector_data,json=vectorData,proto3" json:"vector_data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}   `json:"-"`
	XXX_unrecognized     []byte     `json:"-"`
	XXX_sizecache        int32      `json:"-"`
}

func (m *VectorData) Reset()         { *m = VectorData{} }
func (m *VectorData) String() string { return proto.CompactTextString(m) }
func (*VectorData) ProtoMessage()    {}
func (*VectorData) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{24}
}

func (m *VectorData) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_VectorData.Unmarshal(m, b)
}
func (m *VectorData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_VectorData.Marshal(b, m, deterministic)
}
func (m *VectorData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VectorData.Merge(m, src)
}
func (m *VectorData) XXX_Size() int {
	return xxx_messageInfo_VectorData.Size(m)
}
func (m *VectorData) XXX_DiscardUnknown() {
	xxx_messageInfo_VectorData.DiscardUnknown(m)
}

var xxx_messageInfo_VectorData proto.InternalMessageInfo

func (m *VectorData) GetStatus() *Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *VectorData) GetVectorData() *RowRecord {
	if m != nil {
		return m.VectorData
	}
	return nil
}

//*
// @brief get vector ids from a segment parameters
type GetVectorIDsParam struct {
	CollectionName       string   `protobuf:"bytes,1,opt,name=collection_name,json=collectionName,proto3" json:"collection_name,omitempty"`
	SegmentName          string   `protobuf:"bytes,2,opt,name=segment_name,json=segmentName,proto3" json:"segment_name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetVectorIDsParam) Reset()         { *m = GetVectorIDsParam{} }
func (m *GetVectorIDsParam) String() string { return proto.CompactTextString(m) }
func (*GetVectorIDsParam) ProtoMessage()    {}
func (*GetVectorIDsParam) Descriptor() ([]byte, []int) {
	return fileDescriptor_02345ba45cc0e303, []int{25}
}

func (m *GetVectorIDsParam) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetVectorIDsParam.Unmarshal(m, b)
}
func (m *GetVectorIDsParam) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetVectorIDsParam.Marshal(b, m, deterministic)
}
func (m *GetVectorIDsParam) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetVectorIDsParam.Merge(m, src)
}
func (m *GetVectorIDsParam) XXX_Size() int {
	return xxx_messageInfo_GetVectorIDsParam.Size(m)
}
func (m *GetVectorIDsParam) XXX_DiscardUnknown() {
	xxx_messageInfo_GetVectorIDsParam.DiscardUnknown(m)
}

var xxx_messageInfo_GetVectorIDsParam proto.InternalMessageInfo

func (m *GetVectorIDsParam) GetCollectionName() string {
	if m != nil {
		return m.CollectionName
	}
	return ""
}

func (m *GetVectorIDsParam) GetSegmentName() string {
	if m != nil {
		return m.SegmentName
	}
	return ""
}

func init() {
	proto.RegisterType((*KeyValuePair)(nil), "milvus.grpc.KeyValuePair")
	proto.RegisterType((*CollectionName)(nil), "milvus.grpc.CollectionName")
	proto.RegisterType((*CollectionNameList)(nil), "milvus.grpc.CollectionNameList")
	proto.RegisterType((*CollectionSchema)(nil), "milvus.grpc.CollectionSchema")
	proto.RegisterType((*PartitionParam)(nil), "milvus.grpc.PartitionParam")
	proto.RegisterType((*PartitionList)(nil), "milvus.grpc.PartitionList")
	proto.RegisterType((*RowRecord)(nil), "milvus.grpc.RowRecord")
	proto.RegisterType((*InsertParam)(nil), "milvus.grpc.InsertParam")
	proto.RegisterType((*VectorIds)(nil), "milvus.grpc.VectorIds")
	proto.RegisterType((*SearchParam)(nil), "milvus.grpc.SearchParam")
	proto.RegisterType((*SearchInFilesParam)(nil), "milvus.grpc.SearchInFilesParam")
	proto.RegisterType((*SearchByIDParam)(nil), "milvus.grpc.SearchByIDParam")
	proto.RegisterType((*TopKQueryResult)(nil), "milvus.grpc.TopKQueryResult")
	proto.RegisterType((*StringReply)(nil), "milvus.grpc.StringReply")
	proto.RegisterType((*BoolReply)(nil), "milvus.grpc.BoolReply")
	proto.RegisterType((*CollectionRowCount)(nil), "milvus.grpc.CollectionRowCount")
	proto.RegisterType((*Command)(nil), "milvus.grpc.Command")
	proto.RegisterType((*IndexParam)(nil), "milvus.grpc.IndexParam")
	proto.RegisterType((*FlushParam)(nil), "milvus.grpc.FlushParam")
	proto.RegisterType((*DeleteByIDParam)(nil), "milvus.grpc.DeleteByIDParam")
	proto.RegisterType((*SegmentStat)(nil), "milvus.grpc.SegmentStat")
	proto.RegisterType((*PartitionStat)(nil), "milvus.grpc.PartitionStat")
	proto.RegisterType((*CollectionInfo)(nil), "milvus.grpc.CollectionInfo")
	proto.RegisterType((*VectorIdentity)(nil), "milvus.grpc.VectorIdentity")
	proto.RegisterType((*VectorData)(nil), "milvus.grpc.VectorData")
	proto.RegisterType((*GetVectorIDsParam)(nil), "milvus.grpc.GetVectorIDsParam")
}

func init() { proto.RegisterFile("milvus.proto", fileDescriptor_02345ba45cc0e303) }

var fileDescriptor_02345ba45cc0e303 = []byte{
	// 1406 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x58, 0xed, 0x6e, 0x13, 0x47,
	0x17, 0xf6, 0x7a, 0x93, 0x10, 0x9f, 0xf5, 0x47, 0x18, 0x78, 0x5f, 0x4c, 0x20, 0x2f, 0x7e, 0xa7,
	0x12, 0x75, 0x55, 0x29, 0xaa, 0x52, 0xa9, 0xa8, 0x2a, 0xa8, 0x80, 0x5d, 0xc0, 0x4d, 0x8b, 0xc2,
	0x9a, 0xd2, 0x5f, 0x95, 0x3b, 0xd9, 0x1d, 0xc2, 0x8a, 0xfd, 0x70, 0x67, 0xc6, 0x09, 0xe6, 0x06,
	0xda, 0xfe, 0xe8, 0x8d, 0xf4, 0x22, 0xda, 0x1b, 0xe8, 0x2d, 0xb5, 0xaa, 0x66, 0x66, 0xbf, 0x93,
	0x0d, 0x5e, 0x10, 0xff, 0xbc, 0x67, 0xe6, 0x3c, 0x73, 0xbe, 0xe6, 0x39, 0x67, 0x0c, 0xed, 0xc0,
	0xf3, 0x8f, 0x17, 0x7c, 0x77, 0xce, 0x22, 0x11, 0x21, 0x2b, 0xfe, 0x3a, 0x62, 0x73, 0x67, 0xbb,
	0xcd, 0x05, 0x11, 0xc9, 0x12, 0xfe, 0x0c, 0xda, 0xfb, 0x74, 0xf9, 0x8c, 0xf8, 0x0b, 0x7a, 0x40,
	0x3c, 0x86, 0xb6, 0xc0, 0x7c, 0x49, 0x97, 0x7d, 0x63, 0x60, 0x0c, 0x5b, 0xb6, 0xfc, 0x89, 0x2e,
	0xc3, 0xfa, 0xb1, 0x5c, 0xee, 0x37, 0x95, 0x4c, 0x7f, 0xe0, 0xcf, 0xa1, 0x3b, 0x8a, 0x7c, 0x9f,
	0x3a, 0xc2, 0x8b, 0xc2, 0xc7, 0x24, 0xa0, 0xe8, 0x43, 0xe8, 0x39, 0xa9, 0x64, 0x16, 0x92, 0x80,
	0xc6, 0x28, 0x5d, 0xa7, 0xb0, 0x11, 0xfb, 0x80, 0x8a, 0xaa, 0xdf, 0x78, 0x5c, 0xa0, 0x8f, 0x61,
	0x43, 0x1b, 0xa6, 0xb4, 0xac, 0xbd, 0x4b, 0xbb, 0x39, 0xa3, 0x77, 0xa7, 0x6a, 0xc9, 0x8e, 0xb7,
	0xa0, 0x8f, 0x60, 0xab, 0x74, 0x16, 0xef, 0x37, 0x07, 0xe6, 0xb0, 0x65, 0xf7, 0x8a, 0x87, 0x71,
	0xfc, 0x5b, 0x13, 0xb6, 0xb2, 0xe3, 0xa6, 0xce, 0x0b, 0x1a, 0x90, 0x7a, 0x87, 0x9d, 0xe1, 0x58,
	0xf3, 0x2c, 0xc7, 0xd0, 0x75, 0x68, 0xb9, 0x5e, 0x40, 0x43, 0xee, 0x45, 0x61, 0xdf, 0x1c, 0x18,
	0x43, 0xd3, 0xce, 0x04, 0xe8, 0x26, 0xf4, 0xbc, 0xd0, 0xa5, 0xaf, 0x66, 0xcf, 0x3d, 0x9f, 0xce,
	0xb8, 0xf7, 0x9a, 0xf6, 0xd7, 0xd4, 0x9e, 0x8e, 0x12, 0x3f, 0xf0, 0x7c, 0x3a, 0xf5, 0x5e, 0x53,
	0x74, 0x03, 0xac, 0x80, 0x0a, 0xe6, 0x39, 0x33, 0xb1, 0x9c, 0xd3, 0xfe, 0xfa, 0xc0, 0x18, 0xae,
	0xdb, 0xa0, 0x45, 0x4f, 0x97, 0x73, 0x8a, 0x6e, 0x43, 0x9b, 0xbe, 0x12, 0x8c, 0xcc, 0xe6, 0x84,
	0x91, 0x80, 0xf7, 0x37, 0x06, 0xe6, 0xd0, 0xda, 0xbb, 0x5a, 0x70, 0x21, 0x9f, 0x53, 0xdb, 0x52,
	0xdb, 0x0f, 0xd4, 0x6e, 0xbc, 0x0f, 0xdd, 0x03, 0xc2, 0x84, 0x27, 0xad, 0x56, 0xa2, 0x95, 0x13,
	0x27, 0x6b, 0x43, 0x90, 0xa3, 0xd8, 0x79, 0xf9, 0x13, 0xfb, 0xd0, 0x49, 0xc1, 0xea, 0x67, 0x71,
	0x17, 0x2e, 0xcd, 0x13, 0xed, 0x99, 0x20, 0x47, 0x33, 0xc2, 0x18, 0x59, 0xc6, 0x89, 0xbc, 0x98,
	0x2e, 0x3d, 0x25, 0x47, 0xf7, 0xe4, 0x02, 0xde, 0x87, 0x96, 0x1d, 0x9d, 0xd8, 0xd4, 0x89, 0x98,
	0x8b, 0x76, 0x00, 0x9e, 0xfb, 0x11, 0x11, 0x33, 0x97, 0x08, 0xd2, 0x37, 0x06, 0xe6, 0xb0, 0x69,
	0xb7, 0x94, 0x64, 0x4c, 0x04, 0x91, 0x51, 0x3c, 0xf4, 0x42, 0xc2, 0x96, 0x7a, 0x5d, 0xda, 0xdc,
	0xb6, 0x41, 0x8b, 0xe4, 0x06, 0xfc, 0xb7, 0x01, 0xd6, 0x24, 0xe4, 0x94, 0x89, 0x9a, 0x51, 0xb8,
	0x0b, 0x5b, 0x2c, 0x3a, 0x99, 0x31, 0x65, 0x46, 0xce, 0x64, 0x6b, 0xef, 0xbf, 0x05, 0x67, 0x53,
	0x53, 0xed, 0x2e, 0x4b, 0x7e, 0x2a, 0x3f, 0xd0, 0x00, 0xda, 0x12, 0xc1, 0x4b, 0xb4, 0xcd, 0x81,
	0x39, 0x34, 0x6d, 0x60, 0xd1, 0xc9, 0x24, 0xde, 0xf1, 0x01, 0x74, 0x0a, 0x91, 0x51, 0x95, 0xd2,
	0xb2, 0xdb, 0xf9, 0x98, 0x9c, 0xaa, 0x83, 0xf5, 0x5a, 0x75, 0xf0, 0x23, 0xb4, 0x9e, 0x51, 0x47,
	0x44, 0x6c, 0xe2, 0xf2, 0x7a, 0x69, 0xbb, 0x09, 0xbd, 0x63, 0xa5, 0x99, 0x79, 0xd0, 0x54, 0x1e,
	0x74, 0x8e, 0x63, 0x40, 0x9d, 0xae, 0x7f, 0x0c, 0xb0, 0xa6, 0x94, 0x30, 0xe7, 0x45, 0xcd, 0x08,
	0xd7, 0xac, 0x0b, 0x34, 0x06, 0xf4, 0xd3, 0x82, 0xb2, 0x65, 0x31, 0x27, 0xe6, 0xb9, 0x39, 0xd9,
	0x52, 0x1a, 0xf9, 0xac, 0x20, 0x58, 0x13, 0xd1, 0xfc, 0x65, 0x7c, 0x29, 0xd5, 0xef, 0x77, 0x0c,
	0xf1, 0x02, 0x90, 0xf6, 0x7f, 0x12, 0xca, 0xdb, 0xcd, 0x75, 0x18, 0x30, 0x74, 0x14, 0x03, 0xa4,
	0xc1, 0x33, 0x94, 0x5f, 0x96, 0x14, 0x26, 0xf9, 0xff, 0x02, 0xda, 0x5c, 0x69, 0xea, 0x83, 0x55,
	0xf9, 0x5a, 0x7b, 0xfd, 0x62, 0x56, 0xb2, 0xd0, 0xda, 0x16, 0xcf, 0x3e, 0xf0, 0x5f, 0x06, 0xf4,
	0xf4, 0xe2, 0xfd, 0xe5, 0x64, 0xfc, 0x9e, 0x63, 0xdf, 0x85, 0xa6, 0xe7, 0xc6, 0x64, 0xd7, 0xf4,
	0xdc, 0xf7, 0x10, 0xc5, 0x9f, 0x0d, 0xe8, 0x3d, 0x8d, 0xe6, 0xfb, 0x4f, 0x74, 0xc2, 0xf8, 0xc2,
	0xaf, 0x49, 0x33, 0x57, 0xe0, 0x82, 0xbc, 0x6e, 0xe1, 0x42, 0xc7, 0xd1, 0xb4, 0x37, 0x58, 0x74,
	0xf2, 0x78, 0x11, 0x48, 0x3e, 0xf3, 0x5c, 0x1e, 0x5f, 0x3f, 0xf9, 0x53, 0x33, 0x38, 0x17, 0x24,
	0x74, 0x28, 0xef, 0xaf, 0x69, 0x4e, 0x49, 0x05, 0xf8, 0x07, 0xb0, 0xa6, 0x82, 0x79, 0xe1, 0x91,
	0x4d, 0xe7, 0xfe, 0xb2, 0x9e, 0x11, 0xff, 0x87, 0x36, 0x57, 0xba, 0x33, 0x26, 0x95, 0x63, 0x12,
	0xb5, 0x78, 0x86, 0x87, 0xbf, 0x87, 0xd6, 0xfd, 0x28, 0xf2, 0xdf, 0x02, 0x7c, 0x07, 0xe0, 0x30,
	0x8a, 0xfc, 0x1c, 0xf4, 0xa6, 0xdd, 0x3a, 0x4c, 0xb0, 0x30, 0xcf, 0x37, 0x5c, 0x3b, 0x3a, 0x19,
	0x45, 0x8b, 0xb0, 0x66, 0x0c, 0x3f, 0x81, 0xcb, 0xb9, 0xfa, 0x91, 0xe1, 0x74, 0x24, 0x48, 0x1c,
	0x50, 0xe4, 0x9c, 0x82, 0xc7, 0xd7, 0xe0, 0xc2, 0x28, 0x0a, 0x02, 0x12, 0xba, 0x32, 0xce, 0x4e,
	0xe0, 0x26, 0x33, 0x85, 0x13, 0xb8, 0xf8, 0x4f, 0x03, 0x60, 0x22, 0xbb, 0x9e, 0xae, 0xce, 0xf7,
	0xd3, 0x8e, 0x77, 0x00, 0x74, 0xc3, 0x55, 0x7d, 0xd4, 0x54, 0x7d, 0xb4, 0xa5, 0x24, 0x67, 0xb6,
	0xd1, 0xb5, 0x5a, 0x55, 0x79, 0x17, 0xe0, 0x81, 0xbf, 0xe0, 0x31, 0xb5, 0xed, 0xc1, 0x7f, 0x4a,
	0x36, 0x15, 0xee, 0xf6, 0xa5, 0xa2, 0x65, 0x9a, 0x1e, 0xbf, 0x83, 0xde, 0x98, 0xfa, 0x54, 0xd0,
	0xb7, 0xb8, 0xa5, 0x57, 0x61, 0xb3, 0xc4, 0xbd, 0x17, 0xbc, 0x98, 0x75, 0x7f, 0x55, 0xac, 0x7b,
	0x14, 0xd0, 0x50, 0xc8, 0xc0, 0xa9, 0xc2, 0xd3, 0x9f, 0x79, 0x40, 0x2b, 0x96, 0x29, 0xb4, 0x6b,
	0xd0, 0x2a, 0x67, 0x74, 0x93, 0x25, 0x65, 0x92, 0x46, 0x51, 0x69, 0x9b, 0x4a, 0x5b, 0x47, 0x31,
	0xd1, 0x95, 0x0d, 0x36, 0x3f, 0xcf, 0x6c, 0x4a, 0x81, 0x1c, 0x65, 0xf0, 0x2f, 0x46, 0x6e, 0x3e,
	0x50, 0xd6, 0xc4, 0x23, 0x84, 0x91, 0x8e, 0x10, 0xb2, 0x9b, 0x88, 0x48, 0x10, 0xff, 0x54, 0x51,
	0x75, 0x94, 0x38, 0x2d, 0xd7, 0x3b, 0xd0, 0x89, 0x6d, 0xe6, 0x33, 0x59, 0x09, 0x31, 0xbf, 0x97,
	0x39, 0x31, 0x75, 0xdc, 0x4e, 0xdc, 0xe6, 0xf2, 0x0b, 0xff, 0x6e, 0xe4, 0x07, 0xd6, 0x49, 0xf8,
	0x3c, 0xaa, 0xdd, 0xf4, 0x56, 0x32, 0x73, 0x04, 0xbd, 0x94, 0x24, 0x0b, 0x86, 0x6e, 0x17, 0xd0,
	0x0b, 0x51, 0xb1, 0xbb, 0x99, 0x8a, 0x32, 0x76, 0x02, 0xdd, 0xa4, 0x37, 0xd3, 0x50, 0x78, 0x62,
	0xb9, 0x7a, 0x65, 0x68, 0x3e, 0x6e, 0x26, 0x7c, 0x8c, 0x19, 0x80, 0x86, 0x52, 0x53, 0x51, 0x2d,
	0x97, 0x6f, 0x81, 0x15, 0xf7, 0xf9, 0x74, 0x84, 0xaa, 0xee, 0xa7, 0x70, 0x9c, 0x9e, 0x82, 0x67,
	0x70, 0xf1, 0x21, 0x15, 0xb1, 0x07, 0x63, 0x5e, 0xb3, 0xb6, 0xcb, 0x05, 0xdb, 0x3c, 0x55, 0xb0,
	0x7b, 0x7f, 0x74, 0xa0, 0xf3, 0xad, 0x32, 0x63, 0x4a, 0xd9, 0xb1, 0xe7, 0x50, 0xf4, 0x08, 0xb6,
	0x46, 0x8c, 0x12, 0x41, 0xb3, 0x1c, 0xa3, 0x9d, 0x82, 0xa9, 0xe5, 0x37, 0xc0, 0xf6, 0x59, 0xbe,
	0xe3, 0x06, 0x7a, 0x00, 0x9d, 0x47, 0x84, 0xe7, 0x60, 0xae, 0x55, 0xc0, 0x48, 0x4b, 0xb6, 0x8b,
	0xe1, 0x48, 0xe9, 0x1b, 0x37, 0x90, 0x0d, 0x68, 0x4c, 0xb9, 0xc3, 0xbc, 0x43, 0xba, 0x2a, 0xd8,
	0xf9, 0x06, 0xe3, 0x06, 0x7a, 0x02, 0x3d, 0x55, 0x65, 0xab, 0x02, 0xde, 0xa8, 0x58, 0x4c, 0x49,
	0xba, 0x81, 0xbe, 0x86, 0xde, 0xf4, 0x85, 0xfc, 0x4c, 0xd6, 0x38, 0xba, 0x5c, 0xd2, 0x52, 0x24,
	0x5e, 0x89, 0x95, 0x3c, 0xe0, 0x70, 0x03, 0x1d, 0x00, 0x2a, 0x62, 0xa9, 0x6b, 0x76, 0xae, 0x85,
	0x55, 0x8b, 0x52, 0x13, 0x37, 0xd0, 0x18, 0xba, 0x63, 0x16, 0xcd, 0x57, 0xf5, 0xb7, 0x22, 0xa5,
	0x77, 0xc0, 0xd2, 0xc5, 0xa1, 0x5a, 0x0e, 0xba, 0x52, 0xd8, 0x95, 0xb5, 0xa1, 0x2a, 0xf5, 0x87,
	0xd0, 0x49, 0x32, 0xa9, 0x01, 0xce, 0xb5, 0xa1, 0x0a, 0x1d, 0x37, 0xd0, 0x97, 0xd0, 0x92, 0xde,
	0xac, 0x00, 0x52, 0x61, 0xc9, 0x57, 0xd0, 0xd3, 0x8e, 0xa4, 0xf4, 0x51, 0x82, 0x29, 0xbe, 0xec,
	0xaa, 0x60, 0xf6, 0xa1, 0x2b, 0xf3, 0x94, 0x6e, 0xe6, 0xe7, 0x1b, 0x53, 0xc1, 0x5c, 0x71, 0xd2,
	0x47, 0xd0, 0x91, 0x4e, 0xbd, 0x9b, 0x45, 0xb7, 0x61, 0x43, 0xbf, 0xc5, 0x50, 0xbf, 0x14, 0xbe,
	0xf4, 0x81, 0x56, 0xba, 0x6a, 0xe9, 0xdb, 0x45, 0x27, 0x28, 0xe5, 0x1b, 0xd9, 0x4c, 0x4b, 0x26,
	0x14, 0xa9, 0xb4, 0x94, 0xa0, 0x8c, 0x1c, 0x71, 0x03, 0x3d, 0x82, 0x76, 0x9e, 0xb8, 0xd0, 0xff,
	0x0a, 0x5b, 0x4f, 0x71, 0xda, 0x39, 0x26, 0xdd, 0x87, 0x0d, 0x3d, 0x82, 0xa3, 0xca, 0xa1, 0x7d,
	0xfb, 0x7a, 0x61, 0xa5, 0x34, 0xe2, 0xaa, 0xab, 0x09, 0xd9, 0x18, 0x8f, 0xae, 0x9f, 0x81, 0x93,
	0x4e, 0x0e, 0x6f, 0xc4, 0x3a, 0x80, 0x4e, 0xe1, 0x29, 0x82, 0x6e, 0x9c, 0x01, 0x97, 0x7f, 0xa6,
	0xbc, 0x11, 0xf1, 0x16, 0x98, 0xa3, 0xc0, 0xad, 0x20, 0x8b, 0x92, 0xd3, 0xb9, 0x21, 0xb7, 0x81,
	0xee, 0x01, 0x64, 0x73, 0x4f, 0xc9, 0xad, 0xd2, 0x40, 0x54, 0x7d, 0x23, 0x2f, 0x1e, 0x30, 0xea,
	0x47, 0xc4, 0x7d, 0x47, 0x66, 0xb8, 0x05, 0xeb, 0x6a, 0x8a, 0x2b, 0x71, 0x42, 0x36, 0xd9, 0x55,
	0x53, 0x8a, 0x9c, 0x6e, 0xe7, 0xc4, 0x11, 0x6f, 0x73, 0xee, 0xe1, 0x86, 0xfa, 0xf3, 0xed, 0xd3,
	0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0x05, 0xda, 0x37, 0xc4, 0xa7, 0x13, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MilvusServiceClient is the client API for MilvusService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MilvusServiceClient interface {
	//*
	// @brief This method is used to create collection
	//
	// @param CollectionSchema, use to provide collection information to be created.
	//
	// @return Status
	CreateCollection(ctx context.Context, in *CollectionSchema, opts ...grpc.CallOption) (*Status, error)
	//*
	// @brief This method is used to test collection existence.
	//
	// @param CollectionName, collection name is going to be tested.
	//
	// @return BoolReply
	HasCollection(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*BoolReply, error)
	//*
	// @brief This method is used to get collection schema.
	//
	// @param CollectionName, target collection name.
	//
	// @return CollectionSchema
	DescribeCollection(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*CollectionSchema, error)
	//*
	// @brief This method is used to get collection schema.
	//
	// @param CollectionName, target collection name.
	//
	// @return CollectionRowCount
	CountCollection(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*CollectionRowCount, error)
	//*
	// @brief This method is used to list all collections.
	//
	// @param Command, dummy parameter.
	//
	// @return CollectionNameList
	ShowCollections(ctx context.Context, in *Command, opts ...grpc.CallOption) (*CollectionNameList, error)
	//*
	// @brief This method is used to get collection detail information.
	//
	// @param CollectionName, target collection name.
	//
	// @return CollectionInfo
	ShowCollectionInfo(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*CollectionInfo, error)
	//*
	// @brief This method is used to delete collection.
	//
	// @param CollectionName, collection name is going to be deleted.
	//
	// @return CollectionNameList
	DropCollection(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*Status, error)
	//*
	// @brief This method is used to build index by collection in sync mode.
	//
	// @param IndexParam, index paramters.
	//
	// @return Status
	CreateIndex(ctx context.Context, in *IndexParam, opts ...grpc.CallOption) (*Status, error)
	//*
	// @brief This method is used to describe index
	//
	// @param CollectionName, target collection name.
	//
	// @return IndexParam
	DescribeIndex(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*IndexParam, error)
	//*
	// @brief This method is used to drop index
	//
	// @param CollectionName, target collection name.
	//
	// @return Status
	DropIndex(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*Status, error)
	//*
	// @brief This method is used to create partition
	//
	// @param PartitionParam, partition parameters.
	//
	// @return Status
	CreatePartition(ctx context.Context, in *PartitionParam, opts ...grpc.CallOption) (*Status, error)
	//*
	// @brief This method is used to show partition information
	//
	// @param CollectionName, target collection name.
	//
	// @return PartitionList
	ShowPartitions(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*PartitionList, error)
	//*
	// @brief This method is used to drop partition
	//
	// @param PartitionParam, target partition.
	//
	// @return Status
	DropPartition(ctx context.Context, in *PartitionParam, opts ...grpc.CallOption) (*Status, error)
	//*
	// @brief This method is used to add vector array to collection.
	//
	// @param InsertParam, insert parameters.
	//
	// @return VectorIds
	Insert(ctx context.Context, in *InsertParam, opts ...grpc.CallOption) (*VectorIds, error)
	//*
	// @brief This method is used to get vector data by id.
	//
	// @param VectorIdentity, target vector id.
	//
	// @return VectorData
	GetVectorByID(ctx context.Context, in *VectorIdentity, opts ...grpc.CallOption) (*VectorData, error)
	//*
	// @brief This method is used to get vector ids from a segment
	//
	// @param GetVectorIDsParam, target collection and segment
	//
	// @return VectorIds
	GetVectorIDs(ctx context.Context, in *GetVectorIDsParam, opts ...grpc.CallOption) (*VectorIds, error)
	//*
	// @brief This method is used to query vector in collection.
	//
	// @param SearchParam, search parameters.
	//
	// @return TopKQueryResult
	Search(ctx context.Context, in *SearchParam, opts ...grpc.CallOption) (*TopKQueryResult, error)
	//*
	// @brief This method is used to query vector by id.
	//
	// @param SearchByIDParam, search parameters.
	//
	// @return TopKQueryResult
	SearchByID(ctx context.Context, in *SearchByIDParam, opts ...grpc.CallOption) (*TopKQueryResult, error)
	//*
	// @brief This method is used to query vector in specified files.
	//
	// @param SearchInFilesParam, search in files paremeters.
	//
	// @return TopKQueryResult
	SearchInFiles(ctx context.Context, in *SearchInFilesParam, opts ...grpc.CallOption) (*TopKQueryResult, error)
	//*
	// @brief This method is used to give the server status.
	//
	// @param Command, command string
	//
	// @return StringReply
	Cmd(ctx context.Context, in *Command, opts ...grpc.CallOption) (*StringReply, error)
	//*
	// @brief This method is used to delete vector by id
	//
	// @param DeleteByIDParam, delete parameters.
	//
	// @return status
	DeleteByID(ctx context.Context, in *DeleteByIDParam, opts ...grpc.CallOption) (*Status, error)
	//*
	// @brief This method is used to preload collection
	//
	// @param CollectionName, target collection name.
	//
	// @return Status
	PreloadCollection(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*Status, error)
	//*
	// @brief This method is used to flush buffer into storage.
	//
	// @param FlushParam, flush parameters
	//
	// @return Status
	Flush(ctx context.Context, in *FlushParam, opts ...grpc.CallOption) (*Status, error)
	//*
	// @brief This method is used to compact collection
	//
	// @param CollectionName, target collection name.
	//
	// @return Status
	Compact(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*Status, error)
}

type milvusServiceClient struct {
	cc *grpc.ClientConn
}

func NewMilvusServiceClient(cc *grpc.ClientConn) MilvusServiceClient {
	return &milvusServiceClient{cc}
}

func (c *milvusServiceClient) CreateCollection(ctx context.Context, in *CollectionSchema, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/CreateCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) HasCollection(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*BoolReply, error) {
	out := new(BoolReply)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/HasCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) DescribeCollection(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*CollectionSchema, error) {
	out := new(CollectionSchema)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/DescribeCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) CountCollection(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*CollectionRowCount, error) {
	out := new(CollectionRowCount)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/CountCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) ShowCollections(ctx context.Context, in *Command, opts ...grpc.CallOption) (*CollectionNameList, error) {
	out := new(CollectionNameList)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/ShowCollections", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) ShowCollectionInfo(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*CollectionInfo, error) {
	out := new(CollectionInfo)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/ShowCollectionInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) DropCollection(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/DropCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) CreateIndex(ctx context.Context, in *IndexParam, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/CreateIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) DescribeIndex(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*IndexParam, error) {
	out := new(IndexParam)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/DescribeIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) DropIndex(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/DropIndex", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) CreatePartition(ctx context.Context, in *PartitionParam, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/CreatePartition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) ShowPartitions(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*PartitionList, error) {
	out := new(PartitionList)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/ShowPartitions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) DropPartition(ctx context.Context, in *PartitionParam, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/DropPartition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) Insert(ctx context.Context, in *InsertParam, opts ...grpc.CallOption) (*VectorIds, error) {
	out := new(VectorIds)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/Insert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) GetVectorByID(ctx context.Context, in *VectorIdentity, opts ...grpc.CallOption) (*VectorData, error) {
	out := new(VectorData)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/GetVectorByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) GetVectorIDs(ctx context.Context, in *GetVectorIDsParam, opts ...grpc.CallOption) (*VectorIds, error) {
	out := new(VectorIds)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/GetVectorIDs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) Search(ctx context.Context, in *SearchParam, opts ...grpc.CallOption) (*TopKQueryResult, error) {
	out := new(TopKQueryResult)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/Search", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) SearchByID(ctx context.Context, in *SearchByIDParam, opts ...grpc.CallOption) (*TopKQueryResult, error) {
	out := new(TopKQueryResult)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/SearchByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) SearchInFiles(ctx context.Context, in *SearchInFilesParam, opts ...grpc.CallOption) (*TopKQueryResult, error) {
	out := new(TopKQueryResult)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/SearchInFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) Cmd(ctx context.Context, in *Command, opts ...grpc.CallOption) (*StringReply, error) {
	out := new(StringReply)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/Cmd", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) DeleteByID(ctx context.Context, in *DeleteByIDParam, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/DeleteByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) PreloadCollection(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/PreloadCollection", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) Flush(ctx context.Context, in *FlushParam, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/Flush", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *milvusServiceClient) Compact(ctx context.Context, in *CollectionName, opts ...grpc.CallOption) (*Status, error) {
	out := new(Status)
	err := c.cc.Invoke(ctx, "/milvus.grpc.MilvusService/Compact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MilvusServiceServer is the server API for MilvusService service.
type MilvusServiceServer interface {
	//*
	// @brief This method is used to create collection
	//
	// @param CollectionSchema, use to provide collection information to be created.
	//
	// @return Status
	CreateCollection(context.Context, *CollectionSchema) (*Status, error)
	//*
	// @brief This method is used to test collection existence.
	//
	// @param CollectionName, collection name is going to be tested.
	//
	// @return BoolReply
	HasCollection(context.Context, *CollectionName) (*BoolReply, error)
	//*
	// @brief This method is used to get collection schema.
	//
	// @param CollectionName, target collection name.
	//
	// @return CollectionSchema
	DescribeCollection(context.Context, *CollectionName) (*CollectionSchema, error)
	//*
	// @brief This method is used to get collection schema.
	//
	// @param CollectionName, target collection name.
	//
	// @return CollectionRowCount
	CountCollection(context.Context, *CollectionName) (*CollectionRowCount, error)
	//*
	// @brief This method is used to list all collections.
	//
	// @param Command, dummy parameter.
	//
	// @return CollectionNameList
	ShowCollections(context.Context, *Command) (*CollectionNameList, error)
	//*
	// @brief This method is used to get collection detail information.
	//
	// @param CollectionName, target collection name.
	//
	// @return CollectionInfo
	ShowCollectionInfo(context.Context, *CollectionName) (*CollectionInfo, error)
	//*
	// @brief This method is used to delete collection.
	//
	// @param CollectionName, collection name is going to be deleted.
	//
	// @return CollectionNameList
	DropCollection(context.Context, *CollectionName) (*Status, error)
	//*
	// @brief This method is used to build index by collection in sync mode.
	//
	// @param IndexParam, index paramters.
	//
	// @return Status
	CreateIndex(context.Context, *IndexParam) (*Status, error)
	//*
	// @brief This method is used to describe index
	//
	// @param CollectionName, target collection name.
	//
	// @return IndexParam
	DescribeIndex(context.Context, *CollectionName) (*IndexParam, error)
	//*
	// @brief This method is used to drop index
	//
	// @param CollectionName, target collection name.
	//
	// @return Status
	DropIndex(context.Context, *CollectionName) (*Status, error)
	//*
	// @brief This method is used to create partition
	//
	// @param PartitionParam, partition parameters.
	//
	// @return Status
	CreatePartition(context.Context, *PartitionParam) (*Status, error)
	//*
	// @brief This method is used to show partition information
	//
	// @param CollectionName, target collection name.
	//
	// @return PartitionList
	ShowPartitions(context.Context, *CollectionName) (*PartitionList, error)
	//*
	// @brief This method is used to drop partition
	//
	// @param PartitionParam, target partition.
	//
	// @return Status
	DropPartition(context.Context, *PartitionParam) (*Status, error)
	//*
	// @brief This method is used to add vector array to collection.
	//
	// @param InsertParam, insert parameters.
	//
	// @return VectorIds
	Insert(context.Context, *InsertParam) (*VectorIds, error)
	//*
	// @brief This method is used to get vector data by id.
	//
	// @param VectorIdentity, target vector id.
	//
	// @return VectorData
	GetVectorByID(context.Context, *VectorIdentity) (*VectorData, error)
	//*
	// @brief This method is used to get vector ids from a segment
	//
	// @param GetVectorIDsParam, target collection and segment
	//
	// @return VectorIds
	GetVectorIDs(context.Context, *GetVectorIDsParam) (*VectorIds, error)
	//*
	// @brief This method is used to query vector in collection.
	//
	// @param SearchParam, search parameters.
	//
	// @return TopKQueryResult
	Search(context.Context, *SearchParam) (*TopKQueryResult, error)
	//*
	// @brief This method is used to query vector by id.
	//
	// @param SearchByIDParam, search parameters.
	//
	// @return TopKQueryResult
	SearchByID(context.Context, *SearchByIDParam) (*TopKQueryResult, error)
	//*
	// @brief This method is used to query vector in specified files.
	//
	// @param SearchInFilesParam, search in files paremeters.
	//
	// @return TopKQueryResult
	SearchInFiles(context.Context, *SearchInFilesParam) (*TopKQueryResult, error)
	//*
	// @brief This method is used to give the server status.
	//
	// @param Command, command string
	//
	// @return StringReply
	Cmd(context.Context, *Command) (*StringReply, error)
	//*
	// @brief This method is used to delete vector by id
	//
	// @param DeleteByIDParam, delete parameters.
	//
	// @return status
	DeleteByID(context.Context, *DeleteByIDParam) (*Status, error)
	//*
	// @brief This method is used to preload collection
	//
	// @param CollectionName, target collection name.
	//
	// @return Status
	PreloadCollection(context.Context, *CollectionName) (*Status, error)
	//*
	// @brief This method is used to flush buffer into storage.
	//
	// @param FlushParam, flush parameters
	//
	// @return Status
	Flush(context.Context, *FlushParam) (*Status, error)
	//*
	// @brief This method is used to compact collection
	//
	// @param CollectionName, target collection name.
	//
	// @return Status
	Compact(context.Context, *CollectionName) (*Status, error)
}

// UnimplementedMilvusServiceServer can be embedded to have forward compatible implementations.
type UnimplementedMilvusServiceServer struct {
}

func (*UnimplementedMilvusServiceServer) CreateCollection(ctx context.Context, req *CollectionSchema) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCollection not implemented")
}
func (*UnimplementedMilvusServiceServer) HasCollection(ctx context.Context, req *CollectionName) (*BoolReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method HasCollection not implemented")
}
func (*UnimplementedMilvusServiceServer) DescribeCollection(ctx context.Context, req *CollectionName) (*CollectionSchema, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeCollection not implemented")
}
func (*UnimplementedMilvusServiceServer) CountCollection(ctx context.Context, req *CollectionName) (*CollectionRowCount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CountCollection not implemented")
}
func (*UnimplementedMilvusServiceServer) ShowCollections(ctx context.Context, req *Command) (*CollectionNameList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowCollections not implemented")
}
func (*UnimplementedMilvusServiceServer) ShowCollectionInfo(ctx context.Context, req *CollectionName) (*CollectionInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowCollectionInfo not implemented")
}
func (*UnimplementedMilvusServiceServer) DropCollection(ctx context.Context, req *CollectionName) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropCollection not implemented")
}
func (*UnimplementedMilvusServiceServer) CreateIndex(ctx context.Context, req *IndexParam) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateIndex not implemented")
}
func (*UnimplementedMilvusServiceServer) DescribeIndex(ctx context.Context, req *CollectionName) (*IndexParam, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DescribeIndex not implemented")
}
func (*UnimplementedMilvusServiceServer) DropIndex(ctx context.Context, req *CollectionName) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropIndex not implemented")
}
func (*UnimplementedMilvusServiceServer) CreatePartition(ctx context.Context, req *PartitionParam) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePartition not implemented")
}
func (*UnimplementedMilvusServiceServer) ShowPartitions(ctx context.Context, req *CollectionName) (*PartitionList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShowPartitions not implemented")
}
func (*UnimplementedMilvusServiceServer) DropPartition(ctx context.Context, req *PartitionParam) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DropPartition not implemented")
}
func (*UnimplementedMilvusServiceServer) Insert(ctx context.Context, req *InsertParam) (*VectorIds, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Insert not implemented")
}
func (*UnimplementedMilvusServiceServer) GetVectorByID(ctx context.Context, req *VectorIdentity) (*VectorData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVectorByID not implemented")
}
func (*UnimplementedMilvusServiceServer) GetVectorIDs(ctx context.Context, req *GetVectorIDsParam) (*VectorIds, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVectorIDs not implemented")
}
func (*UnimplementedMilvusServiceServer) Search(ctx context.Context, req *SearchParam) (*TopKQueryResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Search not implemented")
}
func (*UnimplementedMilvusServiceServer) SearchByID(ctx context.Context, req *SearchByIDParam) (*TopKQueryResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchByID not implemented")
}
func (*UnimplementedMilvusServiceServer) SearchInFiles(ctx context.Context, req *SearchInFilesParam) (*TopKQueryResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchInFiles not implemented")
}
func (*UnimplementedMilvusServiceServer) Cmd(ctx context.Context, req *Command) (*StringReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cmd not implemented")
}
func (*UnimplementedMilvusServiceServer) DeleteByID(ctx context.Context, req *DeleteByIDParam) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteByID not implemented")
}
func (*UnimplementedMilvusServiceServer) PreloadCollection(ctx context.Context, req *CollectionName) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PreloadCollection not implemented")
}
func (*UnimplementedMilvusServiceServer) Flush(ctx context.Context, req *FlushParam) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Flush not implemented")
}
func (*UnimplementedMilvusServiceServer) Compact(ctx context.Context, req *CollectionName) (*Status, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Compact not implemented")
}

func RegisterMilvusServiceServer(s *grpc.Server, srv MilvusServiceServer) {
	s.RegisterService(&_MilvusService_serviceDesc, srv)
}

func _MilvusService_CreateCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionSchema)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).CreateCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/CreateCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).CreateCollection(ctx, req.(*CollectionSchema))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_HasCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).HasCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/HasCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).HasCollection(ctx, req.(*CollectionName))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_DescribeCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).DescribeCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/DescribeCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).DescribeCollection(ctx, req.(*CollectionName))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_CountCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).CountCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/CountCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).CountCollection(ctx, req.(*CollectionName))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_ShowCollections_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).ShowCollections(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/ShowCollections",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).ShowCollections(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_ShowCollectionInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).ShowCollectionInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/ShowCollectionInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).ShowCollectionInfo(ctx, req.(*CollectionName))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_DropCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).DropCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/DropCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).DropCollection(ctx, req.(*CollectionName))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_CreateIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IndexParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).CreateIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/CreateIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).CreateIndex(ctx, req.(*IndexParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_DescribeIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).DescribeIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/DescribeIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).DescribeIndex(ctx, req.(*CollectionName))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_DropIndex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).DropIndex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/DropIndex",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).DropIndex(ctx, req.(*CollectionName))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_CreatePartition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartitionParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).CreatePartition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/CreatePartition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).CreatePartition(ctx, req.(*PartitionParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_ShowPartitions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).ShowPartitions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/ShowPartitions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).ShowPartitions(ctx, req.(*CollectionName))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_DropPartition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PartitionParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).DropPartition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/DropPartition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).DropPartition(ctx, req.(*PartitionParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_Insert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).Insert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/Insert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).Insert(ctx, req.(*InsertParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_GetVectorByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VectorIdentity)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).GetVectorByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/GetVectorByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).GetVectorByID(ctx, req.(*VectorIdentity))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_GetVectorIDs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetVectorIDsParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).GetVectorIDs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/GetVectorIDs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).GetVectorIDs(ctx, req.(*GetVectorIDsParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_Search_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).Search(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/Search",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).Search(ctx, req.(*SearchParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_SearchByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchByIDParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).SearchByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/SearchByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).SearchByID(ctx, req.(*SearchByIDParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_SearchInFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchInFilesParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).SearchInFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/SearchInFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).SearchInFiles(ctx, req.(*SearchInFilesParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_Cmd_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Command)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).Cmd(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/Cmd",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).Cmd(ctx, req.(*Command))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_DeleteByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteByIDParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).DeleteByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/DeleteByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).DeleteByID(ctx, req.(*DeleteByIDParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_PreloadCollection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).PreloadCollection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/PreloadCollection",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).PreloadCollection(ctx, req.(*CollectionName))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_Flush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FlushParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).Flush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/Flush",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).Flush(ctx, req.(*FlushParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _MilvusService_Compact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CollectionName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MilvusServiceServer).Compact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/milvus.grpc.MilvusService/Compact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MilvusServiceServer).Compact(ctx, req.(*CollectionName))
	}
	return interceptor(ctx, in, info, handler)
}

var _MilvusService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "milvus.grpc.MilvusService",
	HandlerType: (*MilvusServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateCollection",
			Handler:    _MilvusService_CreateCollection_Handler,
		},
		{
			MethodName: "HasCollection",
			Handler:    _MilvusService_HasCollection_Handler,
		},
		{
			MethodName: "DescribeCollection",
			Handler:    _MilvusService_DescribeCollection_Handler,
		},
		{
			MethodName: "CountCollection",
			Handler:    _MilvusService_CountCollection_Handler,
		},
		{
			MethodName: "ShowCollections",
			Handler:    _MilvusService_ShowCollections_Handler,
		},
		{
			MethodName: "ShowCollectionInfo",
			Handler:    _MilvusService_ShowCollectionInfo_Handler,
		},
		{
			MethodName: "DropCollection",
			Handler:    _MilvusService_DropCollection_Handler,
		},
		{
			MethodName: "CreateIndex",
			Handler:    _MilvusService_CreateIndex_Handler,
		},
		{
			MethodName: "DescribeIndex",
			Handler:    _MilvusService_DescribeIndex_Handler,
		},
		{
			MethodName: "DropIndex",
			Handler:    _MilvusService_DropIndex_Handler,
		},
		{
			MethodName: "CreatePartition",
			Handler:    _MilvusService_CreatePartition_Handler,
		},
		{
			MethodName: "ShowPartitions",
			Handler:    _MilvusService_ShowPartitions_Handler,
		},
		{
			MethodName: "DropPartition",
			Handler:    _MilvusService_DropPartition_Handler,
		},
		{
			MethodName: "Insert",
			Handler:    _MilvusService_Insert_Handler,
		},
		{
			MethodName: "GetVectorByID",
			Handler:    _MilvusService_GetVectorByID_Handler,
		},
		{
			MethodName: "GetVectorIDs",
			Handler:    _MilvusService_GetVectorIDs_Handler,
		},
		{
			MethodName: "Search",
			Handler:    _MilvusService_Search_Handler,
		},
		{
			MethodName: "SearchByID",
			Handler:    _MilvusService_SearchByID_Handler,
		},
		{
			MethodName: "SearchInFiles",
			Handler:    _MilvusService_SearchInFiles_Handler,
		},
		{
			MethodName: "Cmd",
			Handler:    _MilvusService_Cmd_Handler,
		},
		{
			MethodName: "DeleteByID",
			Handler:    _MilvusService_DeleteByID_Handler,
		},
		{
			MethodName: "PreloadCollection",
			Handler:    _MilvusService_PreloadCollection_Handler,
		},
		{
			MethodName: "Flush",
			Handler:    _MilvusService_Flush_Handler,
		},
		{
			MethodName: "Compact",
			Handler:    _MilvusService_Compact_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "milvus.proto",
}
